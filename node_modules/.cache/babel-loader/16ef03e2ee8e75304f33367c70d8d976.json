{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridRegisterPipeProcessor } from '@mui/x-data-grid/internals';\nexport function addPinnedRow(_ref) {\n  let {\n    groupingParams,\n    rowModel,\n    rowId,\n    position,\n    apiRef\n  } = _ref;\n\n  var _groupingParams$addit;\n\n  const idRowsLookup = _extends({}, groupingParams.idRowsLookup);\n\n  const tree = _extends({}, groupingParams.tree); // TODO: warn if id is already present in `props.rows`\n\n\n  idRowsLookup[rowId] = rowModel; // Do not push it to ids list so that pagination is not affected by pinned rows\n  // ids.push(rowId);\n\n  tree[rowId] = {\n    id: rowId,\n    isAutoGenerated: false,\n    parent: null,\n    depth: 0,\n    groupingKey: null,\n    groupingField: null,\n    isPinned: true\n  };\n  apiRef.current.unstable_caches.rows.idRowsLookup[rowId] = _extends({}, rowModel);\n  apiRef.current.unstable_caches.rows.idToIdLookup[rowId] = rowId;\n  const previousPinnedRows = ((_groupingParams$addit = groupingParams.additionalRowGroups) == null ? void 0 : _groupingParams$addit.pinnedRows) || {};\n  const newPinnedRow = {\n    id: rowId,\n    model: rowModel\n  };\n  return _extends({}, groupingParams, {\n    idRowsLookup,\n    tree,\n    additionalRowGroups: _extends({}, groupingParams.additionalRowGroups, {\n      pinnedRows: _extends({}, previousPinnedRows, {\n        [position]: [...(previousPinnedRows[position] || []), newPinnedRow]\n      })\n    })\n  });\n}\nexport const useGridRowPinningPreProcessors = apiRef => {\n  const addPinnedRows = React.useCallback(groupingParams => {\n    var _pinnedRowsCache$topI, _pinnedRowsCache$bott;\n\n    const pinnedRowsCache = apiRef.current.unstable_caches.pinnedRows || {};\n\n    let newGroupingParams = _extends({}, groupingParams, {\n      additionalRowGroups: _extends({}, groupingParams.additionalRowGroups, {\n        // reset pinned rows state\n        pinnedRows: {}\n      })\n    });\n\n    (_pinnedRowsCache$topI = pinnedRowsCache.topIds) == null ? void 0 : _pinnedRowsCache$topI.forEach(rowId => {\n      newGroupingParams = addPinnedRow({\n        groupingParams: newGroupingParams,\n        rowModel: pinnedRowsCache.idLookup[rowId],\n        rowId,\n        position: 'top',\n        apiRef\n      });\n    });\n    (_pinnedRowsCache$bott = pinnedRowsCache.bottomIds) == null ? void 0 : _pinnedRowsCache$bott.forEach(rowId => {\n      newGroupingParams = addPinnedRow({\n        groupingParams: newGroupingParams,\n        rowModel: pinnedRowsCache.idLookup[rowId],\n        rowId,\n        position: 'bottom',\n        apiRef\n      });\n    }); // If row with the same `id` is present both in `rows` and `pinnedRows` - remove it from `ids`\n\n    newGroupingParams.ids = newGroupingParams.ids.filter(rowId => {\n      if (newGroupingParams.tree[rowId] && newGroupingParams.tree[rowId].isPinned) {\n        return false;\n      }\n\n      return true;\n    });\n    return newGroupingParams;\n  }, [apiRef]);\n  useGridRegisterPipeProcessor(apiRef, 'hydrateRows', addPinnedRows);\n};","map":{"version":3,"names":["_extends","React","useGridRegisterPipeProcessor","addPinnedRow","groupingParams","rowModel","rowId","position","apiRef","_groupingParams$addit","idRowsLookup","tree","id","isAutoGenerated","parent","depth","groupingKey","groupingField","isPinned","current","unstable_caches","rows","idToIdLookup","previousPinnedRows","additionalRowGroups","pinnedRows","newPinnedRow","model","useGridRowPinningPreProcessors","addPinnedRows","useCallback","_pinnedRowsCache$topI","_pinnedRowsCache$bott","pinnedRowsCache","newGroupingParams","topIds","forEach","idLookup","bottomIds","ids","filter"],"sources":["/Users/dewan03/project/project/node_modules/@mui/x-data-grid-pro/hooks/features/rowPinning/useGridRowPinningPreProcessors.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridRegisterPipeProcessor } from '@mui/x-data-grid/internals';\nexport function addPinnedRow({\n  groupingParams,\n  rowModel,\n  rowId,\n  position,\n  apiRef\n}) {\n  var _groupingParams$addit;\n\n  const idRowsLookup = _extends({}, groupingParams.idRowsLookup);\n\n  const tree = _extends({}, groupingParams.tree); // TODO: warn if id is already present in `props.rows`\n\n\n  idRowsLookup[rowId] = rowModel; // Do not push it to ids list so that pagination is not affected by pinned rows\n  // ids.push(rowId);\n\n  tree[rowId] = {\n    id: rowId,\n    isAutoGenerated: false,\n    parent: null,\n    depth: 0,\n    groupingKey: null,\n    groupingField: null,\n    isPinned: true\n  };\n  apiRef.current.unstable_caches.rows.idRowsLookup[rowId] = _extends({}, rowModel);\n  apiRef.current.unstable_caches.rows.idToIdLookup[rowId] = rowId;\n  const previousPinnedRows = ((_groupingParams$addit = groupingParams.additionalRowGroups) == null ? void 0 : _groupingParams$addit.pinnedRows) || {};\n  const newPinnedRow = {\n    id: rowId,\n    model: rowModel\n  };\n  return _extends({}, groupingParams, {\n    idRowsLookup,\n    tree,\n    additionalRowGroups: _extends({}, groupingParams.additionalRowGroups, {\n      pinnedRows: _extends({}, previousPinnedRows, {\n        [position]: [...(previousPinnedRows[position] || []), newPinnedRow]\n      })\n    })\n  });\n}\nexport const useGridRowPinningPreProcessors = apiRef => {\n  const addPinnedRows = React.useCallback(groupingParams => {\n    var _pinnedRowsCache$topI, _pinnedRowsCache$bott;\n\n    const pinnedRowsCache = apiRef.current.unstable_caches.pinnedRows || {};\n\n    let newGroupingParams = _extends({}, groupingParams, {\n      additionalRowGroups: _extends({}, groupingParams.additionalRowGroups, {\n        // reset pinned rows state\n        pinnedRows: {}\n      })\n    });\n\n    (_pinnedRowsCache$topI = pinnedRowsCache.topIds) == null ? void 0 : _pinnedRowsCache$topI.forEach(rowId => {\n      newGroupingParams = addPinnedRow({\n        groupingParams: newGroupingParams,\n        rowModel: pinnedRowsCache.idLookup[rowId],\n        rowId,\n        position: 'top',\n        apiRef\n      });\n    });\n    (_pinnedRowsCache$bott = pinnedRowsCache.bottomIds) == null ? void 0 : _pinnedRowsCache$bott.forEach(rowId => {\n      newGroupingParams = addPinnedRow({\n        groupingParams: newGroupingParams,\n        rowModel: pinnedRowsCache.idLookup[rowId],\n        rowId,\n        position: 'bottom',\n        apiRef\n      });\n    }); // If row with the same `id` is present both in `rows` and `pinnedRows` - remove it from `ids`\n\n    newGroupingParams.ids = newGroupingParams.ids.filter(rowId => {\n      if (newGroupingParams.tree[rowId] && newGroupingParams.tree[rowId].isPinned) {\n        return false;\n      }\n\n      return true;\n    });\n    return newGroupingParams;\n  }, [apiRef]);\n  useGridRegisterPipeProcessor(apiRef, 'hydrateRows', addPinnedRows);\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}