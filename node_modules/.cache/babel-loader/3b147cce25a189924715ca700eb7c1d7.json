{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport MuiDivider from '@mui/material/Divider';\nimport { useGridSelector, gridVisibleColumnDefinitionsSelector, gridColumnsTotalWidthSelector, gridColumnPositionsSelector, gridVisibleColumnFieldsSelector, gridClasses, useGridApiMethod, useGridApiEventHandler, gridColumnFieldsSelector } from '@mui/x-data-grid';\nimport { useGridRegisterPipeProcessor } from '@mui/x-data-grid/internals';\nimport { GridColumnPinningMenuItems } from '../../../components/GridColumnPinningMenuItems';\nimport { GridPinnedPosition } from './gridColumnPinningInterface';\nimport { gridPinnedColumnsSelector } from './gridColumnPinningSelector';\nimport { filterColumns } from '../../../components/DataGridProVirtualScroller';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst Divider = () => /*#__PURE__*/_jsx(MuiDivider, {\n  onClick: event => event.stopPropagation()\n});\n\nexport const columnPinningStateInitializer = (state, props, apiRef) => {\n  var _props$initialState;\n\n  apiRef.current.unstable_caches.columnPinning = {\n    orderedFieldsBeforePinningColumns: null\n  };\n  let model;\n\n  if (props.disableColumnPinning) {\n    model = {};\n  } else if (props.pinnedColumns) {\n    model = props.pinnedColumns;\n  } else if ((_props$initialState = props.initialState) != null && _props$initialState.pinnedColumns) {\n    var _props$initialState2;\n\n    model = (_props$initialState2 = props.initialState) == null ? void 0 : _props$initialState2.pinnedColumns;\n  } else {\n    model = {};\n  }\n\n  return _extends({}, state, {\n    pinnedColumns: model\n  });\n};\n\nconst mergeStateWithPinnedColumns = pinnedColumns => state => _extends({}, state, {\n  pinnedColumns\n});\n\nexport const useGridColumnPinning = (apiRef, props) => {\n  var _props$initialState4;\n\n  const pinnedColumns = useGridSelector(apiRef, gridPinnedColumnsSelector); // Each visible row (not to be confused with a filter result) is composed of a central .MuiDataGrid-row element\n  // and up to two additional .MuiDataGrid-row's, one for the columns pinned to the left and another\n  // for those on the right side. When hovering any of these elements, the :hover styles are applied only to\n  // the row element that was actually hovered, not its additional siblings. To make it look like a contiguous row,\n  // this method adds/removes the .Mui-hovered class to all of the row elements inside one visible row.\n\n  const updateHoveredClassOnSiblingRows = React.useCallback(event => {\n    var _pinnedColumns$left$l, _pinnedColumns$left, _pinnedColumns$right$, _pinnedColumns$right;\n\n    if (props.disableColumnPinning) {\n      return;\n    }\n\n    if (!Array.isArray(pinnedColumns.left) && !Array.isArray(pinnedColumns.right)) {\n      return;\n    }\n\n    const nbLeftPinnedColumns = (_pinnedColumns$left$l = (_pinnedColumns$left = pinnedColumns.left) == null ? void 0 : _pinnedColumns$left.length) != null ? _pinnedColumns$left$l : 0;\n    const nbRightPinnedColumns = (_pinnedColumns$right$ = (_pinnedColumns$right = pinnedColumns.right) == null ? void 0 : _pinnedColumns$right.length) != null ? _pinnedColumns$right$ : 0;\n\n    if (nbLeftPinnedColumns + nbRightPinnedColumns === 0) {\n      return;\n    }\n\n    const index = event.currentTarget.dataset.rowindex;\n    const rowElements = apiRef.current.windowRef.current.querySelectorAll(`.${gridClasses.row}[data-rowindex=\"${index}\"]`);\n    rowElements.forEach(row => {\n      // Ignore rows from other grid inside the hovered row\n      if (row.closest(`.${gridClasses.virtualScroller}`) === apiRef.current.windowRef.current) {\n        if (event.type === 'mouseenter') {\n          row.classList.add('Mui-hovered');\n        } else {\n          row.classList.remove('Mui-hovered');\n        }\n      }\n    });\n  }, [apiRef, pinnedColumns.left, pinnedColumns.right, props.disableColumnPinning]);\n  const handleMouseEnter = React.useCallback((params, event) => {\n    updateHoveredClassOnSiblingRows(event);\n  }, [updateHoveredClassOnSiblingRows]);\n  const handleMouseLeave = React.useCallback((params, event) => {\n    updateHoveredClassOnSiblingRows(event);\n  }, [updateHoveredClassOnSiblingRows]);\n  useGridApiEventHandler(apiRef, 'rowMouseEnter', handleMouseEnter);\n  useGridApiEventHandler(apiRef, 'rowMouseLeave', handleMouseLeave);\n  /**\n   * PRE-PROCESSING\n   */\n\n  const calculateScrollLeft = React.useCallback((initialValue, params) => {\n    if (props.disableColumnPinning) {\n      return initialValue;\n    }\n\n    const visibleColumnFields = gridVisibleColumnFieldsSelector(apiRef);\n    const [leftPinnedColumns, rightPinnedColumns] = filterColumns(pinnedColumns, visibleColumnFields);\n\n    if (!params.colIndex || leftPinnedColumns.length === 0 && rightPinnedColumns.length === 0) {\n      return initialValue;\n    }\n\n    const visibleColumns = gridVisibleColumnDefinitionsSelector(apiRef);\n    const columnsTotalWidth = gridColumnsTotalWidthSelector(apiRef);\n    const columnPositions = gridColumnPositionsSelector(apiRef);\n    const clientWidth = apiRef.current.windowRef.current.clientWidth;\n    const scrollLeft = apiRef.current.windowRef.current.scrollLeft;\n    const offsetWidth = visibleColumns[params.colIndex].computedWidth;\n    const offsetLeft = columnPositions[params.colIndex];\n    const leftPinnedColumnsWidth = columnPositions[leftPinnedColumns.length];\n    const rightPinnedColumnsWidth = columnsTotalWidth - columnPositions[columnPositions.length - rightPinnedColumns.length];\n    const elementBottom = offsetLeft + offsetWidth;\n\n    if (elementBottom - (clientWidth - rightPinnedColumnsWidth) > scrollLeft) {\n      const left = elementBottom - (clientWidth - rightPinnedColumnsWidth);\n      return _extends({}, initialValue, {\n        left\n      });\n    }\n\n    if (offsetLeft < scrollLeft + leftPinnedColumnsWidth) {\n      const left = offsetLeft - leftPinnedColumnsWidth;\n      return _extends({}, initialValue, {\n        left\n      });\n    }\n\n    return initialValue;\n  }, [apiRef, pinnedColumns, props.disableColumnPinning]);\n  const addColumnMenuButtons = React.useCallback((initialValue, column) => {\n    if (props.disableColumnPinning) {\n      return initialValue;\n    }\n\n    if (column.pinnable === false) {\n      return initialValue;\n    }\n\n    return [...initialValue, /*#__PURE__*/_jsx(Divider, {}), /*#__PURE__*/_jsx(GridColumnPinningMenuItems, {})];\n  }, [props.disableColumnPinning]);\n  const checkIfCanBeReordered = React.useCallback((initialValue, _ref) => {\n    let {\n      targetIndex\n    } = _ref;\n    const visibleColumnFields = gridVisibleColumnFieldsSelector(apiRef);\n    const [leftPinnedColumns, rightPinnedColumns] = filterColumns(pinnedColumns, visibleColumnFields);\n\n    if (leftPinnedColumns.length === 0 && rightPinnedColumns.length === 0) {\n      return initialValue;\n    }\n\n    if (leftPinnedColumns.length > 0 && targetIndex < leftPinnedColumns.length) {\n      return false;\n    }\n\n    if (rightPinnedColumns.length > 0) {\n      const visibleColumns = gridVisibleColumnDefinitionsSelector(apiRef);\n      const firstRightPinnedColumnIndex = visibleColumns.length - rightPinnedColumns.length;\n      return targetIndex >= firstRightPinnedColumnIndex ? false : initialValue;\n    }\n\n    return initialValue;\n  }, [apiRef, pinnedColumns]);\n  const stateExportPreProcessing = React.useCallback((prevState, context) => {\n    var _props$initialState3, _pinnedColumnsToExpor, _pinnedColumnsToExpor2;\n\n    const pinnedColumnsToExport = gridPinnedColumnsSelector(apiRef.current.state);\n    const shouldExportPinnedColumns = // Always export if the `exportOnlyDirtyModels` property is activated\n    !context.exportOnlyDirtyModels || // Always export if the model is controlled\n    props.pinnedColumns != null || // Always export if the model has been initialized\n    ((_props$initialState3 = props.initialState) == null ? void 0 : _props$initialState3.pinnedColumns) != null || // Export if the model is not empty\n    ((_pinnedColumnsToExpor = pinnedColumnsToExport.left) != null ? _pinnedColumnsToExpor : []).length > 0 || ((_pinnedColumnsToExpor2 = pinnedColumnsToExport.right) != null ? _pinnedColumnsToExpor2 : []).length > 0;\n\n    if (!shouldExportPinnedColumns) {\n      return prevState;\n    }\n\n    return _extends({}, prevState, {\n      pinnedColumns: pinnedColumnsToExport\n    });\n  }, [apiRef, props.pinnedColumns, (_props$initialState4 = props.initialState) == null ? void 0 : _props$initialState4.pinnedColumns]);\n  const stateRestorePreProcessing = React.useCallback((params, context) => {\n    const newPinnedColumns = context.stateToRestore.pinnedColumns;\n\n    if (newPinnedColumns != null) {\n      apiRef.current.setState(mergeStateWithPinnedColumns(newPinnedColumns));\n    }\n\n    return params;\n  }, [apiRef]);\n  useGridRegisterPipeProcessor(apiRef, 'scrollToIndexes', calculateScrollLeft);\n  useGridRegisterPipeProcessor(apiRef, 'columnMenu', addColumnMenuButtons);\n  useGridRegisterPipeProcessor(apiRef, 'canBeReordered', checkIfCanBeReordered);\n  useGridRegisterPipeProcessor(apiRef, 'exportState', stateExportPreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'restoreState', stateRestorePreProcessing);\n  apiRef.current.unstable_registerControlState({\n    stateId: 'pinnedColumns',\n    propModel: props.pinnedColumns,\n    propOnChange: props.onPinnedColumnsChange,\n    stateSelector: gridPinnedColumnsSelector,\n    changeEvent: 'pinnedColumnsChange'\n  });\n  const checkIfEnabled = React.useCallback(methodName => {\n    if (props.disableColumnPinning) {\n      throw new Error(`MUI: You cannot call \\`apiRef.current.${methodName}\\` when \\`disableColumnPinning\\` is true.`);\n    }\n  }, [props.disableColumnPinning]);\n  const pinColumn = React.useCallback((field, side) => {\n    checkIfEnabled('pinColumn');\n\n    if (apiRef.current.isColumnPinned(field) === side) {\n      return;\n    }\n\n    const otherSide = side === GridPinnedPosition.right ? GridPinnedPosition.left : GridPinnedPosition.right;\n    const newPinnedColumns = {\n      [side]: [...(pinnedColumns[side] || []), field],\n      [otherSide]: (pinnedColumns[otherSide] || []).filter(column => column !== field)\n    };\n    apiRef.current.setPinnedColumns(newPinnedColumns);\n  }, [apiRef, checkIfEnabled, pinnedColumns]);\n  const unpinColumn = React.useCallback(field => {\n    checkIfEnabled('unpinColumn');\n    apiRef.current.setPinnedColumns({\n      left: (pinnedColumns.left || []).filter(column => column !== field),\n      right: (pinnedColumns.right || []).filter(column => column !== field)\n    });\n  }, [apiRef, checkIfEnabled, pinnedColumns.left, pinnedColumns.right]);\n  const getPinnedColumns = React.useCallback(() => {\n    checkIfEnabled('getPinnedColumns');\n    return gridPinnedColumnsSelector(apiRef.current.state);\n  }, [apiRef, checkIfEnabled]);\n  const setPinnedColumns = React.useCallback(newPinnedColumns => {\n    checkIfEnabled('setPinnedColumns');\n    apiRef.current.setState(mergeStateWithPinnedColumns(newPinnedColumns));\n    apiRef.current.forceUpdate();\n  }, [apiRef, checkIfEnabled]);\n  const isColumnPinned = React.useCallback(field => {\n    checkIfEnabled('isColumnPinned');\n    const leftPinnedColumns = pinnedColumns.left || [];\n\n    if (leftPinnedColumns.includes(field)) {\n      return GridPinnedPosition.left;\n    }\n\n    const rightPinnedColumns = pinnedColumns.right || [];\n\n    if (rightPinnedColumns.includes(field)) {\n      return GridPinnedPosition.right;\n    }\n\n    return false;\n  }, [pinnedColumns.left, pinnedColumns.right, checkIfEnabled]);\n  const columnPinningApi = {\n    pinColumn,\n    unpinColumn,\n    getPinnedColumns,\n    setPinnedColumns,\n    isColumnPinned\n  };\n  useGridApiMethod(apiRef, columnPinningApi, 'columnPinningApi');\n  const handleColumnOrderChange = React.useCallback(params => {\n    if (!apiRef.current.unstable_caches.columnPinning.orderedFieldsBeforePinningColumns) {\n      return;\n    }\n\n    const {\n      field,\n      targetIndex,\n      oldIndex\n    } = params;\n    const delta = targetIndex > oldIndex ? 1 : -1;\n    const latestColumnFields = gridColumnFieldsSelector(apiRef);\n    /**\n     * When a column X is reordered to somewhere else, the position where this column X is dropped\n     * on must be moved to left or right to make room for it. The ^^^ below represents the column\n     * which gave space to receive X.\n     *\n     * | X | B | C | D | -> | B | C | D | X | (e.g. X moved to after D, so delta=1)\n     *              ^^^              ^^^\n     *\n     * | A | B | C | X | -> | X | A | B | C | (e.g. X moved before A, so delta=-1)\n     *  ^^^                      ^^^\n     *\n     * If column P is pinned, it will not move to provide space. However, it will jump to the next\n     * non-pinned column.\n     *\n     * | X | B | P | D | -> | B | D | P | X | (e.g. X moved to after D, with P pinned)\n     *              ^^^          ^^^\n     */\n\n    const siblingField = latestColumnFields[targetIndex - delta];\n    const newOrderedFieldsBeforePinningColumns = [...apiRef.current.unstable_caches.columnPinning.orderedFieldsBeforePinningColumns]; // The index to start swapping fields\n\n    let i = newOrderedFieldsBeforePinningColumns.findIndex(column => column === field); // The index of the field to swap with\n\n    let j = i + delta; // When to stop swapping fields.\n    // We stop one field before because the swap is done with i + 1 (if delta=1)\n\n    const stop = newOrderedFieldsBeforePinningColumns.findIndex(column => column === siblingField);\n\n    while (delta > 0 ? i < stop : i > stop) {\n      // If the field to swap with is a pinned column, jump to the next\n      while (apiRef.current.isColumnPinned(newOrderedFieldsBeforePinningColumns[j])) {\n        j += delta;\n      }\n\n      const temp = newOrderedFieldsBeforePinningColumns[i];\n      newOrderedFieldsBeforePinningColumns[i] = newOrderedFieldsBeforePinningColumns[j];\n      newOrderedFieldsBeforePinningColumns[j] = temp;\n      i = j;\n      j = i + delta;\n    }\n\n    apiRef.current.unstable_caches.columnPinning.orderedFieldsBeforePinningColumns = newOrderedFieldsBeforePinningColumns;\n  }, [apiRef]);\n  useGridApiEventHandler(apiRef, 'columnOrderChange', handleColumnOrderChange);\n  React.useEffect(() => {\n    if (props.pinnedColumns) {\n      apiRef.current.setPinnedColumns(props.pinnedColumns);\n    }\n  }, [apiRef, props.pinnedColumns]);\n};","map":{"version":3,"names":["_extends","React","MuiDivider","useGridSelector","gridVisibleColumnDefinitionsSelector","gridColumnsTotalWidthSelector","gridColumnPositionsSelector","gridVisibleColumnFieldsSelector","gridClasses","useGridApiMethod","useGridApiEventHandler","gridColumnFieldsSelector","useGridRegisterPipeProcessor","GridColumnPinningMenuItems","GridPinnedPosition","gridPinnedColumnsSelector","filterColumns","jsx","_jsx","Divider","onClick","event","stopPropagation","columnPinningStateInitializer","state","props","apiRef","_props$initialState","current","unstable_caches","columnPinning","orderedFieldsBeforePinningColumns","model","disableColumnPinning","pinnedColumns","initialState","_props$initialState2","mergeStateWithPinnedColumns","useGridColumnPinning","_props$initialState4","updateHoveredClassOnSiblingRows","useCallback","_pinnedColumns$left$l","_pinnedColumns$left","_pinnedColumns$right$","_pinnedColumns$right","Array","isArray","left","right","nbLeftPinnedColumns","length","nbRightPinnedColumns","index","currentTarget","dataset","rowindex","rowElements","windowRef","querySelectorAll","row","forEach","closest","virtualScroller","type","classList","add","remove","handleMouseEnter","params","handleMouseLeave","calculateScrollLeft","initialValue","visibleColumnFields","leftPinnedColumns","rightPinnedColumns","colIndex","visibleColumns","columnsTotalWidth","columnPositions","clientWidth","scrollLeft","offsetWidth","computedWidth","offsetLeft","leftPinnedColumnsWidth","rightPinnedColumnsWidth","elementBottom","addColumnMenuButtons","column","pinnable","checkIfCanBeReordered","targetIndex","firstRightPinnedColumnIndex","stateExportPreProcessing","prevState","context","_props$initialState3","_pinnedColumnsToExpor","_pinnedColumnsToExpor2","pinnedColumnsToExport","shouldExportPinnedColumns","exportOnlyDirtyModels","stateRestorePreProcessing","newPinnedColumns","stateToRestore","setState","unstable_registerControlState","stateId","propModel","propOnChange","onPinnedColumnsChange","stateSelector","changeEvent","checkIfEnabled","methodName","Error","pinColumn","field","side","isColumnPinned","otherSide","filter","setPinnedColumns","unpinColumn","getPinnedColumns","forceUpdate","includes","columnPinningApi","handleColumnOrderChange","oldIndex","delta","latestColumnFields","siblingField","newOrderedFieldsBeforePinningColumns","i","findIndex","j","stop","temp","useEffect"],"sources":["/Users/dewan03/project/project/node_modules/@mui/x-data-grid-pro/hooks/features/columnPinning/useGridColumnPinning.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport MuiDivider from '@mui/material/Divider';\nimport { useGridSelector, gridVisibleColumnDefinitionsSelector, gridColumnsTotalWidthSelector, gridColumnPositionsSelector, gridVisibleColumnFieldsSelector, gridClasses, useGridApiMethod, useGridApiEventHandler, gridColumnFieldsSelector } from '@mui/x-data-grid';\nimport { useGridRegisterPipeProcessor } from '@mui/x-data-grid/internals';\nimport { GridColumnPinningMenuItems } from '../../../components/GridColumnPinningMenuItems';\nimport { GridPinnedPosition } from './gridColumnPinningInterface';\nimport { gridPinnedColumnsSelector } from './gridColumnPinningSelector';\nimport { filterColumns } from '../../../components/DataGridProVirtualScroller';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst Divider = () => /*#__PURE__*/_jsx(MuiDivider, {\n  onClick: event => event.stopPropagation()\n});\n\nexport const columnPinningStateInitializer = (state, props, apiRef) => {\n  var _props$initialState;\n\n  apiRef.current.unstable_caches.columnPinning = {\n    orderedFieldsBeforePinningColumns: null\n  };\n  let model;\n\n  if (props.disableColumnPinning) {\n    model = {};\n  } else if (props.pinnedColumns) {\n    model = props.pinnedColumns;\n  } else if ((_props$initialState = props.initialState) != null && _props$initialState.pinnedColumns) {\n    var _props$initialState2;\n\n    model = (_props$initialState2 = props.initialState) == null ? void 0 : _props$initialState2.pinnedColumns;\n  } else {\n    model = {};\n  }\n\n  return _extends({}, state, {\n    pinnedColumns: model\n  });\n};\n\nconst mergeStateWithPinnedColumns = pinnedColumns => state => _extends({}, state, {\n  pinnedColumns\n});\n\nexport const useGridColumnPinning = (apiRef, props) => {\n  var _props$initialState4;\n\n  const pinnedColumns = useGridSelector(apiRef, gridPinnedColumnsSelector); // Each visible row (not to be confused with a filter result) is composed of a central .MuiDataGrid-row element\n  // and up to two additional .MuiDataGrid-row's, one for the columns pinned to the left and another\n  // for those on the right side. When hovering any of these elements, the :hover styles are applied only to\n  // the row element that was actually hovered, not its additional siblings. To make it look like a contiguous row,\n  // this method adds/removes the .Mui-hovered class to all of the row elements inside one visible row.\n\n  const updateHoveredClassOnSiblingRows = React.useCallback(event => {\n    var _pinnedColumns$left$l, _pinnedColumns$left, _pinnedColumns$right$, _pinnedColumns$right;\n\n    if (props.disableColumnPinning) {\n      return;\n    }\n\n    if (!Array.isArray(pinnedColumns.left) && !Array.isArray(pinnedColumns.right)) {\n      return;\n    }\n\n    const nbLeftPinnedColumns = (_pinnedColumns$left$l = (_pinnedColumns$left = pinnedColumns.left) == null ? void 0 : _pinnedColumns$left.length) != null ? _pinnedColumns$left$l : 0;\n    const nbRightPinnedColumns = (_pinnedColumns$right$ = (_pinnedColumns$right = pinnedColumns.right) == null ? void 0 : _pinnedColumns$right.length) != null ? _pinnedColumns$right$ : 0;\n\n    if (nbLeftPinnedColumns + nbRightPinnedColumns === 0) {\n      return;\n    }\n\n    const index = event.currentTarget.dataset.rowindex;\n    const rowElements = apiRef.current.windowRef.current.querySelectorAll(`.${gridClasses.row}[data-rowindex=\"${index}\"]`);\n    rowElements.forEach(row => {\n      // Ignore rows from other grid inside the hovered row\n      if (row.closest(`.${gridClasses.virtualScroller}`) === apiRef.current.windowRef.current) {\n        if (event.type === 'mouseenter') {\n          row.classList.add('Mui-hovered');\n        } else {\n          row.classList.remove('Mui-hovered');\n        }\n      }\n    });\n  }, [apiRef, pinnedColumns.left, pinnedColumns.right, props.disableColumnPinning]);\n  const handleMouseEnter = React.useCallback((params, event) => {\n    updateHoveredClassOnSiblingRows(event);\n  }, [updateHoveredClassOnSiblingRows]);\n  const handleMouseLeave = React.useCallback((params, event) => {\n    updateHoveredClassOnSiblingRows(event);\n  }, [updateHoveredClassOnSiblingRows]);\n  useGridApiEventHandler(apiRef, 'rowMouseEnter', handleMouseEnter);\n  useGridApiEventHandler(apiRef, 'rowMouseLeave', handleMouseLeave);\n  /**\n   * PRE-PROCESSING\n   */\n\n  const calculateScrollLeft = React.useCallback((initialValue, params) => {\n    if (props.disableColumnPinning) {\n      return initialValue;\n    }\n\n    const visibleColumnFields = gridVisibleColumnFieldsSelector(apiRef);\n    const [leftPinnedColumns, rightPinnedColumns] = filterColumns(pinnedColumns, visibleColumnFields);\n\n    if (!params.colIndex || leftPinnedColumns.length === 0 && rightPinnedColumns.length === 0) {\n      return initialValue;\n    }\n\n    const visibleColumns = gridVisibleColumnDefinitionsSelector(apiRef);\n    const columnsTotalWidth = gridColumnsTotalWidthSelector(apiRef);\n    const columnPositions = gridColumnPositionsSelector(apiRef);\n    const clientWidth = apiRef.current.windowRef.current.clientWidth;\n    const scrollLeft = apiRef.current.windowRef.current.scrollLeft;\n    const offsetWidth = visibleColumns[params.colIndex].computedWidth;\n    const offsetLeft = columnPositions[params.colIndex];\n    const leftPinnedColumnsWidth = columnPositions[leftPinnedColumns.length];\n    const rightPinnedColumnsWidth = columnsTotalWidth - columnPositions[columnPositions.length - rightPinnedColumns.length];\n    const elementBottom = offsetLeft + offsetWidth;\n\n    if (elementBottom - (clientWidth - rightPinnedColumnsWidth) > scrollLeft) {\n      const left = elementBottom - (clientWidth - rightPinnedColumnsWidth);\n      return _extends({}, initialValue, {\n        left\n      });\n    }\n\n    if (offsetLeft < scrollLeft + leftPinnedColumnsWidth) {\n      const left = offsetLeft - leftPinnedColumnsWidth;\n      return _extends({}, initialValue, {\n        left\n      });\n    }\n\n    return initialValue;\n  }, [apiRef, pinnedColumns, props.disableColumnPinning]);\n  const addColumnMenuButtons = React.useCallback((initialValue, column) => {\n    if (props.disableColumnPinning) {\n      return initialValue;\n    }\n\n    if (column.pinnable === false) {\n      return initialValue;\n    }\n\n    return [...initialValue, /*#__PURE__*/_jsx(Divider, {}), /*#__PURE__*/_jsx(GridColumnPinningMenuItems, {})];\n  }, [props.disableColumnPinning]);\n  const checkIfCanBeReordered = React.useCallback((initialValue, {\n    targetIndex\n  }) => {\n    const visibleColumnFields = gridVisibleColumnFieldsSelector(apiRef);\n    const [leftPinnedColumns, rightPinnedColumns] = filterColumns(pinnedColumns, visibleColumnFields);\n\n    if (leftPinnedColumns.length === 0 && rightPinnedColumns.length === 0) {\n      return initialValue;\n    }\n\n    if (leftPinnedColumns.length > 0 && targetIndex < leftPinnedColumns.length) {\n      return false;\n    }\n\n    if (rightPinnedColumns.length > 0) {\n      const visibleColumns = gridVisibleColumnDefinitionsSelector(apiRef);\n      const firstRightPinnedColumnIndex = visibleColumns.length - rightPinnedColumns.length;\n      return targetIndex >= firstRightPinnedColumnIndex ? false : initialValue;\n    }\n\n    return initialValue;\n  }, [apiRef, pinnedColumns]);\n  const stateExportPreProcessing = React.useCallback((prevState, context) => {\n    var _props$initialState3, _pinnedColumnsToExpor, _pinnedColumnsToExpor2;\n\n    const pinnedColumnsToExport = gridPinnedColumnsSelector(apiRef.current.state);\n    const shouldExportPinnedColumns = // Always export if the `exportOnlyDirtyModels` property is activated\n    !context.exportOnlyDirtyModels || // Always export if the model is controlled\n    props.pinnedColumns != null || // Always export if the model has been initialized\n    ((_props$initialState3 = props.initialState) == null ? void 0 : _props$initialState3.pinnedColumns) != null || // Export if the model is not empty\n    ((_pinnedColumnsToExpor = pinnedColumnsToExport.left) != null ? _pinnedColumnsToExpor : []).length > 0 || ((_pinnedColumnsToExpor2 = pinnedColumnsToExport.right) != null ? _pinnedColumnsToExpor2 : []).length > 0;\n\n    if (!shouldExportPinnedColumns) {\n      return prevState;\n    }\n\n    return _extends({}, prevState, {\n      pinnedColumns: pinnedColumnsToExport\n    });\n  }, [apiRef, props.pinnedColumns, (_props$initialState4 = props.initialState) == null ? void 0 : _props$initialState4.pinnedColumns]);\n  const stateRestorePreProcessing = React.useCallback((params, context) => {\n    const newPinnedColumns = context.stateToRestore.pinnedColumns;\n\n    if (newPinnedColumns != null) {\n      apiRef.current.setState(mergeStateWithPinnedColumns(newPinnedColumns));\n    }\n\n    return params;\n  }, [apiRef]);\n  useGridRegisterPipeProcessor(apiRef, 'scrollToIndexes', calculateScrollLeft);\n  useGridRegisterPipeProcessor(apiRef, 'columnMenu', addColumnMenuButtons);\n  useGridRegisterPipeProcessor(apiRef, 'canBeReordered', checkIfCanBeReordered);\n  useGridRegisterPipeProcessor(apiRef, 'exportState', stateExportPreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'restoreState', stateRestorePreProcessing);\n  apiRef.current.unstable_registerControlState({\n    stateId: 'pinnedColumns',\n    propModel: props.pinnedColumns,\n    propOnChange: props.onPinnedColumnsChange,\n    stateSelector: gridPinnedColumnsSelector,\n    changeEvent: 'pinnedColumnsChange'\n  });\n  const checkIfEnabled = React.useCallback(methodName => {\n    if (props.disableColumnPinning) {\n      throw new Error(`MUI: You cannot call \\`apiRef.current.${methodName}\\` when \\`disableColumnPinning\\` is true.`);\n    }\n  }, [props.disableColumnPinning]);\n  const pinColumn = React.useCallback((field, side) => {\n    checkIfEnabled('pinColumn');\n\n    if (apiRef.current.isColumnPinned(field) === side) {\n      return;\n    }\n\n    const otherSide = side === GridPinnedPosition.right ? GridPinnedPosition.left : GridPinnedPosition.right;\n    const newPinnedColumns = {\n      [side]: [...(pinnedColumns[side] || []), field],\n      [otherSide]: (pinnedColumns[otherSide] || []).filter(column => column !== field)\n    };\n    apiRef.current.setPinnedColumns(newPinnedColumns);\n  }, [apiRef, checkIfEnabled, pinnedColumns]);\n  const unpinColumn = React.useCallback(field => {\n    checkIfEnabled('unpinColumn');\n    apiRef.current.setPinnedColumns({\n      left: (pinnedColumns.left || []).filter(column => column !== field),\n      right: (pinnedColumns.right || []).filter(column => column !== field)\n    });\n  }, [apiRef, checkIfEnabled, pinnedColumns.left, pinnedColumns.right]);\n  const getPinnedColumns = React.useCallback(() => {\n    checkIfEnabled('getPinnedColumns');\n    return gridPinnedColumnsSelector(apiRef.current.state);\n  }, [apiRef, checkIfEnabled]);\n  const setPinnedColumns = React.useCallback(newPinnedColumns => {\n    checkIfEnabled('setPinnedColumns');\n    apiRef.current.setState(mergeStateWithPinnedColumns(newPinnedColumns));\n    apiRef.current.forceUpdate();\n  }, [apiRef, checkIfEnabled]);\n  const isColumnPinned = React.useCallback(field => {\n    checkIfEnabled('isColumnPinned');\n    const leftPinnedColumns = pinnedColumns.left || [];\n\n    if (leftPinnedColumns.includes(field)) {\n      return GridPinnedPosition.left;\n    }\n\n    const rightPinnedColumns = pinnedColumns.right || [];\n\n    if (rightPinnedColumns.includes(field)) {\n      return GridPinnedPosition.right;\n    }\n\n    return false;\n  }, [pinnedColumns.left, pinnedColumns.right, checkIfEnabled]);\n  const columnPinningApi = {\n    pinColumn,\n    unpinColumn,\n    getPinnedColumns,\n    setPinnedColumns,\n    isColumnPinned\n  };\n  useGridApiMethod(apiRef, columnPinningApi, 'columnPinningApi');\n  const handleColumnOrderChange = React.useCallback(params => {\n    if (!apiRef.current.unstable_caches.columnPinning.orderedFieldsBeforePinningColumns) {\n      return;\n    }\n\n    const {\n      field,\n      targetIndex,\n      oldIndex\n    } = params;\n    const delta = targetIndex > oldIndex ? 1 : -1;\n    const latestColumnFields = gridColumnFieldsSelector(apiRef);\n    /**\n     * When a column X is reordered to somewhere else, the position where this column X is dropped\n     * on must be moved to left or right to make room for it. The ^^^ below represents the column\n     * which gave space to receive X.\n     *\n     * | X | B | C | D | -> | B | C | D | X | (e.g. X moved to after D, so delta=1)\n     *              ^^^              ^^^\n     *\n     * | A | B | C | X | -> | X | A | B | C | (e.g. X moved before A, so delta=-1)\n     *  ^^^                      ^^^\n     *\n     * If column P is pinned, it will not move to provide space. However, it will jump to the next\n     * non-pinned column.\n     *\n     * | X | B | P | D | -> | B | D | P | X | (e.g. X moved to after D, with P pinned)\n     *              ^^^          ^^^\n     */\n\n    const siblingField = latestColumnFields[targetIndex - delta];\n    const newOrderedFieldsBeforePinningColumns = [...apiRef.current.unstable_caches.columnPinning.orderedFieldsBeforePinningColumns]; // The index to start swapping fields\n\n    let i = newOrderedFieldsBeforePinningColumns.findIndex(column => column === field); // The index of the field to swap with\n\n    let j = i + delta; // When to stop swapping fields.\n    // We stop one field before because the swap is done with i + 1 (if delta=1)\n\n    const stop = newOrderedFieldsBeforePinningColumns.findIndex(column => column === siblingField);\n\n    while (delta > 0 ? i < stop : i > stop) {\n      // If the field to swap with is a pinned column, jump to the next\n      while (apiRef.current.isColumnPinned(newOrderedFieldsBeforePinningColumns[j])) {\n        j += delta;\n      }\n\n      const temp = newOrderedFieldsBeforePinningColumns[i];\n      newOrderedFieldsBeforePinningColumns[i] = newOrderedFieldsBeforePinningColumns[j];\n      newOrderedFieldsBeforePinningColumns[j] = temp;\n      i = j;\n      j = i + delta;\n    }\n\n    apiRef.current.unstable_caches.columnPinning.orderedFieldsBeforePinningColumns = newOrderedFieldsBeforePinningColumns;\n  }, [apiRef]);\n  useGridApiEventHandler(apiRef, 'columnOrderChange', handleColumnOrderChange);\n  React.useEffect(() => {\n    if (props.pinnedColumns) {\n      apiRef.current.setPinnedColumns(props.pinnedColumns);\n    }\n  }, [apiRef, props.pinnedColumns]);\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}