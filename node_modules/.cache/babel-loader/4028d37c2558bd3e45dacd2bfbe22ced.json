{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { getGridDefaultColumnTypes, GridLinkOperator } from '@mui/x-data-grid-pro';\nimport { isDeepEqual } from '@mui/x-data-grid/internals';\nimport { useDemoData, getColumnsFromOptions, getInitialState } from './useDemoData';\n\nconst simplifiedValueGetter = (field, colDef) => row => {\n  var _colDef$valueGetter;\n\n  const params = {\n    id: row.id,\n    row,\n    field,\n    rowNode: {}\n  }; // @ts-ignore\n\n  return ((_colDef$valueGetter = colDef.valueGetter) == null ? void 0 : _colDef$valueGetter.call(colDef, params)) || row[field];\n};\n\nconst getRowComparator = (sortModel, columnsWithDefaultColDef) => {\n  if (!sortModel) {\n    const comparator = () => 0;\n\n    return comparator;\n  }\n\n  const sortOperators = sortModel.map(sortItem => {\n    const columnField = sortItem.field;\n    const colDef = columnsWithDefaultColDef.find(_ref => {\n      let {\n        field\n      } = _ref;\n      return field === columnField;\n    });\n    return _extends({}, sortItem, {\n      valueGetter: simplifiedValueGetter(columnField, colDef),\n      sortComparator: colDef.sortComparator\n    });\n  });\n\n  const comparator = (row1, row2) => sortOperators.reduce((acc, _ref2) => {\n    let {\n      valueGetter,\n      sort,\n      sortComparator\n    } = _ref2;\n\n    if (acc !== 0) {\n      return acc;\n    }\n\n    const v1 = valueGetter(row1);\n    const v2 = valueGetter(row2);\n    return sort === 'desc' ? -1 * sortComparator(v1, v2) : sortComparator(v1, v2);\n  }, 0);\n\n  return comparator;\n};\n\nconst getFilteredRows = (rows, filterModel, columnsWithDefaultColDef) => {\n  if (filterModel === undefined || filterModel.items.length === 0) {\n    return rows;\n  }\n\n  const valueGetters = filterModel.items.map(_ref3 => {\n    let {\n      columnField\n    } = _ref3;\n    return simplifiedValueGetter(columnField, columnsWithDefaultColDef.find(_ref4 => {\n      let {\n        field\n      } = _ref4;\n      return field === columnField;\n    }));\n  });\n  const filterFunctions = filterModel.items.map(filterItem => {\n    const {\n      columnField,\n      operatorValue\n    } = filterItem;\n    const colDef = columnsWithDefaultColDef.find(_ref5 => {\n      let {\n        field\n      } = _ref5;\n      return field === columnField;\n    });\n    const filterOperator = colDef.filterOperators.find(_ref6 => {\n      let {\n        value\n      } = _ref6;\n      return operatorValue === value;\n    });\n    let parsedValue = filterItem.value;\n\n    if (colDef.valueParser) {\n      var _filterItem$value;\n\n      const parser = colDef.valueParser;\n      parsedValue = Array.isArray(filterItem.value) ? (_filterItem$value = filterItem.value) == null ? void 0 : _filterItem$value.map(x => parser(x)) : parser(filterItem.value);\n    }\n\n    return filterOperator == null ? void 0 : filterOperator.getApplyFilterFn({\n      filterItem,\n      value: parsedValue\n    }, colDef);\n  });\n\n  if (filterModel.linkOperator === GridLinkOperator.Or) {\n    return rows.filter(row => filterModel.items.some((_, index) => {\n      const value = valueGetters[index](row);\n      return filterFunctions[index] === null ? true : filterFunctions[index]({\n        value\n      });\n    }));\n  }\n\n  return rows.filter(row => filterModel.items.every((_, index) => {\n    const value = valueGetters[index](row);\n    return filterFunctions[index] === null ? true : filterFunctions[index]({\n      value\n    });\n  }));\n};\n/**\n * Simulates server data loading\n */\n\n\nexport const loadServerRows = (rows, queryOptions, serverOptions, columnsWithDefaultColDef) => {\n  const {\n    minDelay = 100,\n    maxDelay = 300,\n    useCursorPagination\n  } = serverOptions;\n\n  if (maxDelay < minDelay) {\n    throw new Error('serverOptions.minDelay is larger than serverOptions.maxDelay ');\n  }\n\n  const delay = Math.random() * (maxDelay - minDelay) + minDelay;\n  const {\n    cursor,\n    page = 0,\n    pageSize\n  } = queryOptions;\n  let nextCursor;\n  let firstRowIndex;\n  let lastRowIndex;\n  let filteredRows = getFilteredRows(rows, queryOptions.filterModel, columnsWithDefaultColDef);\n  const rowComparator = getRowComparator(queryOptions.sortModel, columnsWithDefaultColDef);\n  filteredRows = [...filteredRows].sort(rowComparator);\n  const totalRowCount = filteredRows.length;\n\n  if (!pageSize) {\n    firstRowIndex = 0;\n    lastRowIndex = filteredRows.length;\n  } else if (useCursorPagination) {\n    firstRowIndex = cursor ? filteredRows.findIndex(_ref7 => {\n      let {\n        id\n      } = _ref7;\n      return id === cursor;\n    }) : 0;\n    firstRowIndex = Math.max(firstRowIndex, 0); // if cursor not found return 0\n\n    lastRowIndex = firstRowIndex + pageSize;\n    nextCursor = lastRowIndex >= filteredRows.length ? undefined : filteredRows[lastRowIndex].id;\n  } else {\n    firstRowIndex = page * pageSize;\n    lastRowIndex = (page + 1) * pageSize;\n  }\n\n  const response = {\n    returnedRows: filteredRows.slice(firstRowIndex, lastRowIndex),\n    nextCursor,\n    totalRowCount\n  };\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve(response);\n    }, delay); // simulate network latency\n  });\n};\nconst DEFAULT_DATASET_OPTIONS = {\n  dataSet: 'Commodity',\n  rowLength: 100,\n  maxColumns: 6\n};\nconst disableDelay = typeof DISABLE_CHANCE_RANDOM !== 'undefined' && DISABLE_CHANCE_RANDOM;\nconst DEFAULT_SERVER_OPTIONS = {\n  minDelay: disableDelay ? 0 : 100,\n  maxDelay: disableDelay ? 0 : 300,\n  useCursorPagination: true\n};\nexport const createFakeServer = (dataSetOptions, serverOptions) => {\n  const dataSetOptionsWithDefault = _extends({}, DEFAULT_DATASET_OPTIONS, dataSetOptions);\n\n  const serverOptionsWithDefault = _extends({}, DEFAULT_SERVER_OPTIONS, serverOptions);\n\n  const columns = getColumnsFromOptions(dataSetOptionsWithDefault);\n  const initialState = getInitialState(dataSetOptionsWithDefault, columns);\n  const defaultColDef = getGridDefaultColumnTypes();\n  const columnsWithDefaultColDef = columns.map(column => _extends({}, defaultColDef[column.type || 'string'], column));\n\n  const useQuery = queryOptions => {\n    const {\n      data: {\n        rows\n      },\n      loading: dataGenerationIsLoading\n    } = useDemoData(dataSetOptionsWithDefault);\n    const queryOptionsRef = React.useRef(queryOptions);\n    const [response, setResponse] = React.useState({\n      pageInfo: {},\n      data: []\n    });\n    const [isLoading, setIsLoading] = React.useState(dataGenerationIsLoading);\n    React.useEffect(() => {\n      if (dataGenerationIsLoading) {\n        // dataset is not ready\n        return () => {};\n      }\n\n      queryOptionsRef.current = queryOptions;\n      let active = true;\n      setIsLoading(true);\n      setResponse(prev => Object.keys(prev.pageInfo).length === 0 ? prev : _extends({}, prev, {\n        pageInfo: {}\n      }));\n\n      (async function fetchData() {\n        const {\n          returnedRows,\n          nextCursor,\n          totalRowCount\n        } = await loadServerRows(rows, queryOptions, serverOptionsWithDefault, columnsWithDefaultColDef);\n\n        if (!active) {\n          return;\n        }\n\n        const newRep = {\n          data: returnedRows,\n          pageInfo: {\n            totalRowCount,\n            nextCursor,\n            pageSize: returnedRows.length\n          }\n        };\n        setResponse(prev => isDeepEqual(prev, newRep) ? prev : newRep);\n        setIsLoading(false);\n      })();\n\n      return () => {\n        active = false;\n      };\n    }, [dataGenerationIsLoading, queryOptions, rows]); // We use queryOptions pointer to be sure that isLoading===true as soon as the options change\n\n    const effectShouldStart = queryOptionsRef.current !== queryOptions;\n    return _extends({\n      isLoading: isLoading || effectShouldStart\n    }, response);\n  };\n\n  return {\n    columns,\n    columnsWithDefaultColDef,\n    initialState,\n    useQuery\n  };\n};","map":{"version":3,"names":["_extends","React","getGridDefaultColumnTypes","GridLinkOperator","isDeepEqual","useDemoData","getColumnsFromOptions","getInitialState","simplifiedValueGetter","field","colDef","row","_colDef$valueGetter","params","id","rowNode","valueGetter","call","getRowComparator","sortModel","columnsWithDefaultColDef","comparator","sortOperators","map","sortItem","columnField","find","sortComparator","row1","row2","reduce","acc","sort","v1","v2","getFilteredRows","rows","filterModel","undefined","items","length","valueGetters","filterFunctions","filterItem","operatorValue","filterOperator","filterOperators","value","parsedValue","valueParser","_filterItem$value","parser","Array","isArray","x","getApplyFilterFn","linkOperator","Or","filter","some","_","index","every","loadServerRows","queryOptions","serverOptions","minDelay","maxDelay","useCursorPagination","Error","delay","Math","random","cursor","page","pageSize","nextCursor","firstRowIndex","lastRowIndex","filteredRows","rowComparator","totalRowCount","findIndex","max","response","returnedRows","slice","Promise","resolve","setTimeout","DEFAULT_DATASET_OPTIONS","dataSet","rowLength","maxColumns","disableDelay","DISABLE_CHANCE_RANDOM","DEFAULT_SERVER_OPTIONS","createFakeServer","dataSetOptions","dataSetOptionsWithDefault","serverOptionsWithDefault","columns","initialState","defaultColDef","column","type","useQuery","data","loading","dataGenerationIsLoading","queryOptionsRef","useRef","setResponse","useState","pageInfo","isLoading","setIsLoading","useEffect","current","active","prev","Object","keys","fetchData","newRep","effectShouldStart"],"sources":["/Users/dewan03/project/project/node_modules/@mui/x-data-grid-generator/hooks/useQuery.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { getGridDefaultColumnTypes, GridLinkOperator } from '@mui/x-data-grid-pro';\nimport { isDeepEqual } from '@mui/x-data-grid/internals';\nimport { useDemoData, getColumnsFromOptions, getInitialState } from './useDemoData';\n\nconst simplifiedValueGetter = (field, colDef) => row => {\n  var _colDef$valueGetter;\n\n  const params = {\n    id: row.id,\n    row,\n    field,\n    rowNode: {}\n  }; // @ts-ignore\n\n  return ((_colDef$valueGetter = colDef.valueGetter) == null ? void 0 : _colDef$valueGetter.call(colDef, params)) || row[field];\n};\n\nconst getRowComparator = (sortModel, columnsWithDefaultColDef) => {\n  if (!sortModel) {\n    const comparator = () => 0;\n\n    return comparator;\n  }\n\n  const sortOperators = sortModel.map(sortItem => {\n    const columnField = sortItem.field;\n    const colDef = columnsWithDefaultColDef.find(({\n      field\n    }) => field === columnField);\n    return _extends({}, sortItem, {\n      valueGetter: simplifiedValueGetter(columnField, colDef),\n      sortComparator: colDef.sortComparator\n    });\n  });\n\n  const comparator = (row1, row2) => sortOperators.reduce((acc, {\n    valueGetter,\n    sort,\n    sortComparator\n  }) => {\n    if (acc !== 0) {\n      return acc;\n    }\n\n    const v1 = valueGetter(row1);\n    const v2 = valueGetter(row2);\n    return sort === 'desc' ? -1 * sortComparator(v1, v2) : sortComparator(v1, v2);\n  }, 0);\n\n  return comparator;\n};\n\nconst getFilteredRows = (rows, filterModel, columnsWithDefaultColDef) => {\n  if (filterModel === undefined || filterModel.items.length === 0) {\n    return rows;\n  }\n\n  const valueGetters = filterModel.items.map(({\n    columnField\n  }) => simplifiedValueGetter(columnField, columnsWithDefaultColDef.find(({\n    field\n  }) => field === columnField)));\n  const filterFunctions = filterModel.items.map(filterItem => {\n    const {\n      columnField,\n      operatorValue\n    } = filterItem;\n    const colDef = columnsWithDefaultColDef.find(({\n      field\n    }) => field === columnField);\n    const filterOperator = colDef.filterOperators.find(({\n      value\n    }) => operatorValue === value);\n    let parsedValue = filterItem.value;\n\n    if (colDef.valueParser) {\n      var _filterItem$value;\n\n      const parser = colDef.valueParser;\n      parsedValue = Array.isArray(filterItem.value) ? (_filterItem$value = filterItem.value) == null ? void 0 : _filterItem$value.map(x => parser(x)) : parser(filterItem.value);\n    }\n\n    return filterOperator == null ? void 0 : filterOperator.getApplyFilterFn({\n      filterItem,\n      value: parsedValue\n    }, colDef);\n  });\n\n  if (filterModel.linkOperator === GridLinkOperator.Or) {\n    return rows.filter(row => filterModel.items.some((_, index) => {\n      const value = valueGetters[index](row);\n      return filterFunctions[index] === null ? true : filterFunctions[index]({\n        value\n      });\n    }));\n  }\n\n  return rows.filter(row => filterModel.items.every((_, index) => {\n    const value = valueGetters[index](row);\n    return filterFunctions[index] === null ? true : filterFunctions[index]({\n      value\n    });\n  }));\n};\n/**\n * Simulates server data loading\n */\n\n\nexport const loadServerRows = (rows, queryOptions, serverOptions, columnsWithDefaultColDef) => {\n  const {\n    minDelay = 100,\n    maxDelay = 300,\n    useCursorPagination\n  } = serverOptions;\n\n  if (maxDelay < minDelay) {\n    throw new Error('serverOptions.minDelay is larger than serverOptions.maxDelay ');\n  }\n\n  const delay = Math.random() * (maxDelay - minDelay) + minDelay;\n  const {\n    cursor,\n    page = 0,\n    pageSize\n  } = queryOptions;\n  let nextCursor;\n  let firstRowIndex;\n  let lastRowIndex;\n  let filteredRows = getFilteredRows(rows, queryOptions.filterModel, columnsWithDefaultColDef);\n  const rowComparator = getRowComparator(queryOptions.sortModel, columnsWithDefaultColDef);\n  filteredRows = [...filteredRows].sort(rowComparator);\n  const totalRowCount = filteredRows.length;\n\n  if (!pageSize) {\n    firstRowIndex = 0;\n    lastRowIndex = filteredRows.length;\n  } else if (useCursorPagination) {\n    firstRowIndex = cursor ? filteredRows.findIndex(({\n      id\n    }) => id === cursor) : 0;\n    firstRowIndex = Math.max(firstRowIndex, 0); // if cursor not found return 0\n\n    lastRowIndex = firstRowIndex + pageSize;\n    nextCursor = lastRowIndex >= filteredRows.length ? undefined : filteredRows[lastRowIndex].id;\n  } else {\n    firstRowIndex = page * pageSize;\n    lastRowIndex = (page + 1) * pageSize;\n  }\n\n  const response = {\n    returnedRows: filteredRows.slice(firstRowIndex, lastRowIndex),\n    nextCursor,\n    totalRowCount\n  };\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve(response);\n    }, delay); // simulate network latency\n  });\n};\nconst DEFAULT_DATASET_OPTIONS = {\n  dataSet: 'Commodity',\n  rowLength: 100,\n  maxColumns: 6\n};\nconst disableDelay = typeof DISABLE_CHANCE_RANDOM !== 'undefined' && DISABLE_CHANCE_RANDOM;\nconst DEFAULT_SERVER_OPTIONS = {\n  minDelay: disableDelay ? 0 : 100,\n  maxDelay: disableDelay ? 0 : 300,\n  useCursorPagination: true\n};\nexport const createFakeServer = (dataSetOptions, serverOptions) => {\n  const dataSetOptionsWithDefault = _extends({}, DEFAULT_DATASET_OPTIONS, dataSetOptions);\n\n  const serverOptionsWithDefault = _extends({}, DEFAULT_SERVER_OPTIONS, serverOptions);\n\n  const columns = getColumnsFromOptions(dataSetOptionsWithDefault);\n  const initialState = getInitialState(dataSetOptionsWithDefault, columns);\n  const defaultColDef = getGridDefaultColumnTypes();\n  const columnsWithDefaultColDef = columns.map(column => _extends({}, defaultColDef[column.type || 'string'], column));\n\n  const useQuery = queryOptions => {\n    const {\n      data: {\n        rows\n      },\n      loading: dataGenerationIsLoading\n    } = useDemoData(dataSetOptionsWithDefault);\n    const queryOptionsRef = React.useRef(queryOptions);\n    const [response, setResponse] = React.useState({\n      pageInfo: {},\n      data: []\n    });\n    const [isLoading, setIsLoading] = React.useState(dataGenerationIsLoading);\n    React.useEffect(() => {\n      if (dataGenerationIsLoading) {\n        // dataset is not ready\n        return () => {};\n      }\n\n      queryOptionsRef.current = queryOptions;\n      let active = true;\n      setIsLoading(true);\n      setResponse(prev => Object.keys(prev.pageInfo).length === 0 ? prev : _extends({}, prev, {\n        pageInfo: {}\n      }));\n\n      (async function fetchData() {\n        const {\n          returnedRows,\n          nextCursor,\n          totalRowCount\n        } = await loadServerRows(rows, queryOptions, serverOptionsWithDefault, columnsWithDefaultColDef);\n\n        if (!active) {\n          return;\n        }\n\n        const newRep = {\n          data: returnedRows,\n          pageInfo: {\n            totalRowCount,\n            nextCursor,\n            pageSize: returnedRows.length\n          }\n        };\n        setResponse(prev => isDeepEqual(prev, newRep) ? prev : newRep);\n        setIsLoading(false);\n      })();\n\n      return () => {\n        active = false;\n      };\n    }, [dataGenerationIsLoading, queryOptions, rows]); // We use queryOptions pointer to be sure that isLoading===true as soon as the options change\n\n    const effectShouldStart = queryOptionsRef.current !== queryOptions;\n    return _extends({\n      isLoading: isLoading || effectShouldStart\n    }, response);\n  };\n\n  return {\n    columns,\n    columnsWithDefaultColDef,\n    initialState,\n    useQuery\n  };\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}