{"ast":null,"code":"import { isNumber } from '@mui/x-data-grid-pro/internals';\nconst sumAgg = {\n  apply: _ref => {\n    let {\n      values\n    } = _ref;\n    let sum = 0;\n\n    for (let i = 0; i < values.length; i += 1) {\n      const value = values[i];\n\n      if (value != null) {\n        sum += value;\n      }\n    }\n\n    return sum;\n  },\n  columnTypes: ['number']\n};\nconst avgAgg = {\n  apply: params => {\n    if (params.values.length === 0) {\n      return null;\n    }\n\n    const sum = sumAgg.apply(params);\n    return sum / params.values.length;\n  },\n  columnTypes: ['number']\n};\nconst minAgg = {\n  apply: _ref2 => {\n    let {\n      values\n    } = _ref2;\n\n    if (values.length === 0) {\n      return null;\n    }\n\n    let min = +Infinity;\n\n    for (let i = 0; i < values.length; i += 1) {\n      const value = values[i];\n\n      if (value != null && value < min) {\n        min = value;\n      }\n    }\n\n    return min;\n  },\n  columnTypes: ['number', 'date', 'dateTime']\n};\nconst maxAgg = {\n  apply: _ref3 => {\n    let {\n      values\n    } = _ref3;\n\n    if (values.length === 0) {\n      return null;\n    }\n\n    let max = -Infinity;\n\n    for (let i = 0; i < values.length; i += 1) {\n      const value = values[i];\n\n      if (value != null && value > max) {\n        max = value;\n      }\n    }\n\n    return max;\n  },\n  columnTypes: ['number', 'date', 'dateTime']\n};\nconst sizeAgg = {\n  apply: _ref4 => {\n    let {\n      values\n    } = _ref4;\n    return values.length;\n  },\n  valueFormatter: params => {\n    if (params.value == null || !isNumber(params.value)) {\n      return params.value;\n    }\n\n    return params.value.toLocaleString();\n  },\n  hasCellUnit: false\n};\nexport const GRID_AGGREGATION_FUNCTIONS = {\n  sum: sumAgg,\n  avg: avgAgg,\n  min: minAgg,\n  max: maxAgg,\n  size: sizeAgg\n};","map":{"version":3,"names":["isNumber","sumAgg","apply","values","sum","i","length","value","columnTypes","avgAgg","params","minAgg","min","Infinity","maxAgg","max","sizeAgg","valueFormatter","toLocaleString","hasCellUnit","GRID_AGGREGATION_FUNCTIONS","avg","size"],"sources":["/Users/dewan03/project/project/node_modules/@mui/x-data-grid-premium/hooks/features/aggregation/gridAggregationFunctions.js"],"sourcesContent":["import { isNumber } from '@mui/x-data-grid-pro/internals';\nconst sumAgg = {\n  apply: ({\n    values\n  }) => {\n    let sum = 0;\n\n    for (let i = 0; i < values.length; i += 1) {\n      const value = values[i];\n\n      if (value != null) {\n        sum += value;\n      }\n    }\n\n    return sum;\n  },\n  columnTypes: ['number']\n};\nconst avgAgg = {\n  apply: params => {\n    if (params.values.length === 0) {\n      return null;\n    }\n\n    const sum = sumAgg.apply(params);\n    return sum / params.values.length;\n  },\n  columnTypes: ['number']\n};\nconst minAgg = {\n  apply: ({\n    values\n  }) => {\n    if (values.length === 0) {\n      return null;\n    }\n\n    let min = +Infinity;\n\n    for (let i = 0; i < values.length; i += 1) {\n      const value = values[i];\n\n      if (value != null && value < min) {\n        min = value;\n      }\n    }\n\n    return min;\n  },\n  columnTypes: ['number', 'date', 'dateTime']\n};\nconst maxAgg = {\n  apply: ({\n    values\n  }) => {\n    if (values.length === 0) {\n      return null;\n    }\n\n    let max = -Infinity;\n\n    for (let i = 0; i < values.length; i += 1) {\n      const value = values[i];\n\n      if (value != null && value > max) {\n        max = value;\n      }\n    }\n\n    return max;\n  },\n  columnTypes: ['number', 'date', 'dateTime']\n};\nconst sizeAgg = {\n  apply: ({\n    values\n  }) => {\n    return values.length;\n  },\n  valueFormatter: params => {\n    if (params.value == null || !isNumber(params.value)) {\n      return params.value;\n    }\n\n    return params.value.toLocaleString();\n  },\n  hasCellUnit: false\n};\nexport const GRID_AGGREGATION_FUNCTIONS = {\n  sum: sumAgg,\n  avg: avgAgg,\n  min: minAgg,\n  max: maxAgg,\n  size: sizeAgg\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}