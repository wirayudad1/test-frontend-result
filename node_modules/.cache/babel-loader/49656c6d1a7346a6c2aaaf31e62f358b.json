{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_composeClasses as composeClasses } from '@mui/material';\nimport { useGridApiEventHandler, getDataGridUtilityClass, useGridLogger } from '@mui/x-data-grid';\nimport { gridColumnReorderDragColSelector } from './columnReorderSelector';\nconst CURSOR_MOVE_DIRECTION_LEFT = 'left';\nconst CURSOR_MOVE_DIRECTION_RIGHT = 'right';\n\nconst getCursorMoveDirectionX = (currentCoordinates, nextCoordinates) => {\n  return currentCoordinates.x <= nextCoordinates.x ? CURSOR_MOVE_DIRECTION_RIGHT : CURSOR_MOVE_DIRECTION_LEFT;\n};\n\nconst hasCursorPositionChanged = (currentCoordinates, nextCoordinates) => currentCoordinates.x !== nextCoordinates.x || currentCoordinates.y !== nextCoordinates.y;\n\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    columnHeaderDragging: ['columnHeader--dragging']\n  };\n  return composeClasses(slots, getDataGridUtilityClass, classes);\n};\n\nexport const columnReorderStateInitializer = state => _extends({}, state, {\n  columnReorder: {\n    dragCol: ''\n  }\n});\n/**\n * @requires useGridColumns (method)\n */\n\nexport const useGridColumnReorder = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridColumnReorder');\n  const dragColNode = React.useRef(null);\n  const cursorPosition = React.useRef({\n    x: 0,\n    y: 0\n  });\n  const originColumnIndex = React.useRef(null);\n  const forbiddenIndexes = React.useRef({});\n  const removeDnDStylesTimeout = React.useRef();\n  const ownerState = {\n    classes: props.classes\n  };\n  const classes = useUtilityClasses(ownerState);\n  React.useEffect(() => {\n    return () => {\n      clearTimeout(removeDnDStylesTimeout.current);\n    };\n  }, []);\n  const handleDragStart = React.useCallback((params, event) => {\n    if (props.disableColumnReorder || params.colDef.disableReorder) {\n      return;\n    }\n\n    logger.debug(`Start dragging col ${params.field}`); // Prevent drag events propagation.\n    // For more information check here https://github.com/mui/mui-x/issues/2680.\n\n    event.stopPropagation();\n    dragColNode.current = event.currentTarget;\n    dragColNode.current.classList.add(classes.columnHeaderDragging);\n    apiRef.current.setState(state => _extends({}, state, {\n      columnReorder: _extends({}, state.columnReorder, {\n        dragCol: params.field\n      })\n    }));\n    apiRef.current.forceUpdate();\n    removeDnDStylesTimeout.current = setTimeout(() => {\n      dragColNode.current.classList.remove(classes.columnHeaderDragging);\n    });\n    originColumnIndex.current = apiRef.current.getColumnIndex(params.field, false);\n    const draggingColumnGroupPath = apiRef.current.unstable_getColumnGroupPath(params.field);\n    const columnIndex = originColumnIndex.current;\n    const allColumns = apiRef.current.getAllColumns();\n    const groupsLookup = apiRef.current.unstable_getAllGroupDetails(); // The limitingGroupId is the id of the group from which the dragged column should not escape\n\n    let limitingGroupId = null;\n    draggingColumnGroupPath.forEach(groupId => {\n      var _groupsLookup$groupId;\n\n      if (!((_groupsLookup$groupId = groupsLookup[groupId]) != null && _groupsLookup$groupId.freeReordering)) {\n        var _allColumns$groupPath, _allColumns$groupPath2; // Only consider group that are made of more than one column\n\n\n        if (columnIndex > 0 && (_allColumns$groupPath = allColumns[columnIndex - 1].groupPath) != null && _allColumns$groupPath.includes(groupId)) {\n          limitingGroupId = groupId;\n        } else if (columnIndex + 1 < allColumns.length && (_allColumns$groupPath2 = allColumns[columnIndex + 1].groupPath) != null && _allColumns$groupPath2.includes(groupId)) {\n          limitingGroupId = groupId;\n        }\n      }\n    });\n    forbiddenIndexes.current = {};\n\n    for (let indexToForbid = 0; indexToForbid < allColumns.length; indexToForbid += 1) {\n      const leftIndex = indexToForbid <= columnIndex ? indexToForbid - 1 : indexToForbid;\n      const rightIndex = indexToForbid < columnIndex ? indexToForbid : indexToForbid + 1;\n\n      if (limitingGroupId !== null) {\n        var _allColumns$leftIndex, _allColumns$rightInde; // verify this indexToForbid will be linked to the limiting group. Otherwise forbid it\n\n\n        let allowIndex = false;\n\n        if (leftIndex >= 0 && (_allColumns$leftIndex = allColumns[leftIndex].groupPath) != null && _allColumns$leftIndex.includes(limitingGroupId)) {\n          allowIndex = true;\n        } else if (rightIndex < allColumns.length && (_allColumns$rightInde = allColumns[rightIndex].groupPath) != null && _allColumns$rightInde.includes(limitingGroupId)) {\n          allowIndex = true;\n        }\n\n        if (!allowIndex) {\n          forbiddenIndexes.current[indexToForbid] = true;\n        }\n      } // Verify we are not splitting another group\n\n\n      if (leftIndex >= 0 && rightIndex < allColumns.length) {\n        var _allColumns$rightInde2, _allColumns$rightInde3;\n\n        (_allColumns$rightInde2 = allColumns[rightIndex]) == null ? void 0 : (_allColumns$rightInde3 = _allColumns$rightInde2.groupPath) == null ? void 0 : _allColumns$rightInde3.forEach(groupId => {\n          var _allColumns$leftIndex2;\n\n          if ((_allColumns$leftIndex2 = allColumns[leftIndex].groupPath) != null && _allColumns$leftIndex2.includes(groupId)) {\n            if (!draggingColumnGroupPath.includes(groupId)) {\n              var _groupsLookup$groupId2; // moving here split the group groupId in two distincts chunks\n\n\n              if (!((_groupsLookup$groupId2 = groupsLookup[groupId]) != null && _groupsLookup$groupId2.freeReordering)) {\n                forbiddenIndexes.current[indexToForbid] = true;\n              }\n            }\n          }\n        });\n      }\n    }\n  }, [props.disableColumnReorder, classes.columnHeaderDragging, logger, apiRef]);\n  const handleDragEnter = React.useCallback((params, event) => {\n    event.preventDefault(); // Prevent drag events propagation.\n    // For more information check here https://github.com/mui/mui-x/issues/2680.\n\n    event.stopPropagation();\n  }, []);\n  const handleDragOver = React.useCallback((params, event) => {\n    const dragColField = gridColumnReorderDragColSelector(apiRef);\n\n    if (!dragColField) {\n      return;\n    }\n\n    logger.debug(`Dragging over col ${params.field}`);\n    event.preventDefault(); // Prevent drag events propagation.\n    // For more information check here https://github.com/mui/mui-x/issues/2680.\n\n    event.stopPropagation();\n    const coordinates = {\n      x: event.clientX,\n      y: event.clientY\n    };\n\n    if (params.field !== dragColField && hasCursorPositionChanged(cursorPosition.current, coordinates)) {\n      const targetColIndex = apiRef.current.getColumnIndex(params.field, false);\n      const targetColVisibleIndex = apiRef.current.getColumnIndex(params.field, true);\n      const targetCol = apiRef.current.getColumn(params.field);\n      const dragColIndex = apiRef.current.getColumnIndex(dragColField, false);\n      const visibleColumns = apiRef.current.getVisibleColumns();\n      const allColumns = apiRef.current.getAllColumns();\n      const cursorMoveDirectionX = getCursorMoveDirectionX(cursorPosition.current, coordinates);\n      const hasMovedLeft = cursorMoveDirectionX === CURSOR_MOVE_DIRECTION_LEFT && targetColIndex < dragColIndex;\n      const hasMovedRight = cursorMoveDirectionX === CURSOR_MOVE_DIRECTION_RIGHT && dragColIndex < targetColIndex;\n\n      if (hasMovedLeft || hasMovedRight) {\n        let canBeReordered;\n        let indexOffsetInHiddenColumns = 0;\n\n        if (!targetCol.disableReorder) {\n          canBeReordered = true;\n        } else if (hasMovedLeft) {\n          canBeReordered = targetColVisibleIndex > 0 && !visibleColumns[targetColVisibleIndex - 1].disableReorder;\n        } else {\n          canBeReordered = targetColVisibleIndex < visibleColumns.length - 1 && !visibleColumns[targetColVisibleIndex + 1].disableReorder;\n        }\n\n        if (forbiddenIndexes.current[targetColIndex]) {\n          let nextVisibleColumnField;\n          let indexWithOffset = targetColIndex + indexOffsetInHiddenColumns;\n\n          if (hasMovedLeft) {\n            nextVisibleColumnField = targetColVisibleIndex > 0 ? visibleColumns[targetColVisibleIndex - 1].field : null;\n\n            while (indexWithOffset > 0 && allColumns[indexWithOffset].field !== nextVisibleColumnField && forbiddenIndexes.current[indexWithOffset]) {\n              indexOffsetInHiddenColumns -= 1;\n              indexWithOffset = targetColIndex + indexOffsetInHiddenColumns;\n            }\n          } else {\n            nextVisibleColumnField = targetColVisibleIndex + 1 < visibleColumns.length ? visibleColumns[targetColVisibleIndex + 1].field : null;\n\n            while (indexWithOffset < allColumns.length - 1 && allColumns[indexWithOffset].field !== nextVisibleColumnField && forbiddenIndexes.current[indexWithOffset]) {\n              indexOffsetInHiddenColumns += 1;\n              indexWithOffset = targetColIndex + indexOffsetInHiddenColumns;\n            }\n          }\n\n          if (forbiddenIndexes.current[indexWithOffset] || allColumns[indexWithOffset].field === nextVisibleColumnField) {\n            // If we ended up on a visible column, or a forbidden one, we can not do the reorder\n            canBeReordered = false;\n          }\n        }\n\n        const canBeReorderedProcessed = apiRef.current.unstable_applyPipeProcessors('canBeReordered', canBeReordered, {\n          targetIndex: targetColVisibleIndex\n        });\n\n        if (canBeReorderedProcessed) {\n          apiRef.current.setColumnIndex(dragColField, targetColIndex + indexOffsetInHiddenColumns);\n        }\n      }\n\n      cursorPosition.current = coordinates;\n    }\n  }, [apiRef, logger]);\n  const handleDragEnd = React.useCallback((params, event) => {\n    const dragColField = gridColumnReorderDragColSelector(apiRef);\n\n    if (props.disableColumnReorder || !dragColField) {\n      return;\n    }\n\n    logger.debug('End dragging col');\n    event.preventDefault(); // Prevent drag events propagation.\n    // For more information check here https://github.com/mui/mui-x/issues/2680.\n\n    event.stopPropagation();\n    clearTimeout(removeDnDStylesTimeout.current);\n    dragColNode.current = null; // Check if the column was dropped outside the grid.\n\n    if (event.dataTransfer.dropEffect === 'none') {\n      // Accessing params.field may contain the wrong field as header elements are reused\n      apiRef.current.setColumnIndex(dragColField, originColumnIndex.current);\n      originColumnIndex.current = null;\n    }\n\n    apiRef.current.setState(state => _extends({}, state, {\n      columnReorder: _extends({}, state.columnReorder, {\n        dragCol: ''\n      })\n    }));\n    apiRef.current.forceUpdate();\n  }, [props.disableColumnReorder, logger, apiRef]);\n  useGridApiEventHandler(apiRef, 'columnHeaderDragStart', handleDragStart);\n  useGridApiEventHandler(apiRef, 'columnHeaderDragEnter', handleDragEnter);\n  useGridApiEventHandler(apiRef, 'columnHeaderDragOver', handleDragOver);\n  useGridApiEventHandler(apiRef, 'columnHeaderDragEnd', handleDragEnd);\n  useGridApiEventHandler(apiRef, 'cellDragEnter', handleDragEnter);\n  useGridApiEventHandler(apiRef, 'cellDragOver', handleDragOver);\n};","map":{"version":3,"names":["_extends","React","unstable_composeClasses","composeClasses","useGridApiEventHandler","getDataGridUtilityClass","useGridLogger","gridColumnReorderDragColSelector","CURSOR_MOVE_DIRECTION_LEFT","CURSOR_MOVE_DIRECTION_RIGHT","getCursorMoveDirectionX","currentCoordinates","nextCoordinates","x","hasCursorPositionChanged","y","useUtilityClasses","ownerState","classes","slots","columnHeaderDragging","columnReorderStateInitializer","state","columnReorder","dragCol","useGridColumnReorder","apiRef","props","logger","dragColNode","useRef","cursorPosition","originColumnIndex","forbiddenIndexes","removeDnDStylesTimeout","useEffect","clearTimeout","current","handleDragStart","useCallback","params","event","disableColumnReorder","colDef","disableReorder","debug","field","stopPropagation","currentTarget","classList","add","setState","forceUpdate","setTimeout","remove","getColumnIndex","draggingColumnGroupPath","unstable_getColumnGroupPath","columnIndex","allColumns","getAllColumns","groupsLookup","unstable_getAllGroupDetails","limitingGroupId","forEach","groupId","_groupsLookup$groupId","freeReordering","_allColumns$groupPath","_allColumns$groupPath2","groupPath","includes","length","indexToForbid","leftIndex","rightIndex","_allColumns$leftIndex","_allColumns$rightInde","allowIndex","_allColumns$rightInde2","_allColumns$rightInde3","_allColumns$leftIndex2","_groupsLookup$groupId2","handleDragEnter","preventDefault","handleDragOver","dragColField","coordinates","clientX","clientY","targetColIndex","targetColVisibleIndex","targetCol","getColumn","dragColIndex","visibleColumns","getVisibleColumns","cursorMoveDirectionX","hasMovedLeft","hasMovedRight","canBeReordered","indexOffsetInHiddenColumns","nextVisibleColumnField","indexWithOffset","canBeReorderedProcessed","unstable_applyPipeProcessors","targetIndex","setColumnIndex","handleDragEnd","dataTransfer","dropEffect"],"sources":["/Users/dewan03/project/project/node_modules/@mui/x-data-grid-pro/hooks/features/columnReorder/useGridColumnReorder.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_composeClasses as composeClasses } from '@mui/material';\nimport { useGridApiEventHandler, getDataGridUtilityClass, useGridLogger } from '@mui/x-data-grid';\nimport { gridColumnReorderDragColSelector } from './columnReorderSelector';\nconst CURSOR_MOVE_DIRECTION_LEFT = 'left';\nconst CURSOR_MOVE_DIRECTION_RIGHT = 'right';\n\nconst getCursorMoveDirectionX = (currentCoordinates, nextCoordinates) => {\n  return currentCoordinates.x <= nextCoordinates.x ? CURSOR_MOVE_DIRECTION_RIGHT : CURSOR_MOVE_DIRECTION_LEFT;\n};\n\nconst hasCursorPositionChanged = (currentCoordinates, nextCoordinates) => currentCoordinates.x !== nextCoordinates.x || currentCoordinates.y !== nextCoordinates.y;\n\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    columnHeaderDragging: ['columnHeader--dragging']\n  };\n  return composeClasses(slots, getDataGridUtilityClass, classes);\n};\n\nexport const columnReorderStateInitializer = state => _extends({}, state, {\n  columnReorder: {\n    dragCol: ''\n  }\n});\n/**\n * @requires useGridColumns (method)\n */\n\nexport const useGridColumnReorder = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridColumnReorder');\n  const dragColNode = React.useRef(null);\n  const cursorPosition = React.useRef({\n    x: 0,\n    y: 0\n  });\n  const originColumnIndex = React.useRef(null);\n  const forbiddenIndexes = React.useRef({});\n  const removeDnDStylesTimeout = React.useRef();\n  const ownerState = {\n    classes: props.classes\n  };\n  const classes = useUtilityClasses(ownerState);\n  React.useEffect(() => {\n    return () => {\n      clearTimeout(removeDnDStylesTimeout.current);\n    };\n  }, []);\n  const handleDragStart = React.useCallback((params, event) => {\n    if (props.disableColumnReorder || params.colDef.disableReorder) {\n      return;\n    }\n\n    logger.debug(`Start dragging col ${params.field}`); // Prevent drag events propagation.\n    // For more information check here https://github.com/mui/mui-x/issues/2680.\n\n    event.stopPropagation();\n    dragColNode.current = event.currentTarget;\n    dragColNode.current.classList.add(classes.columnHeaderDragging);\n    apiRef.current.setState(state => _extends({}, state, {\n      columnReorder: _extends({}, state.columnReorder, {\n        dragCol: params.field\n      })\n    }));\n    apiRef.current.forceUpdate();\n    removeDnDStylesTimeout.current = setTimeout(() => {\n      dragColNode.current.classList.remove(classes.columnHeaderDragging);\n    });\n    originColumnIndex.current = apiRef.current.getColumnIndex(params.field, false);\n    const draggingColumnGroupPath = apiRef.current.unstable_getColumnGroupPath(params.field);\n    const columnIndex = originColumnIndex.current;\n    const allColumns = apiRef.current.getAllColumns();\n    const groupsLookup = apiRef.current.unstable_getAllGroupDetails(); // The limitingGroupId is the id of the group from which the dragged column should not escape\n\n    let limitingGroupId = null;\n    draggingColumnGroupPath.forEach(groupId => {\n      var _groupsLookup$groupId;\n\n      if (!((_groupsLookup$groupId = groupsLookup[groupId]) != null && _groupsLookup$groupId.freeReordering)) {\n        var _allColumns$groupPath, _allColumns$groupPath2;\n\n        // Only consider group that are made of more than one column\n        if (columnIndex > 0 && (_allColumns$groupPath = allColumns[columnIndex - 1].groupPath) != null && _allColumns$groupPath.includes(groupId)) {\n          limitingGroupId = groupId;\n        } else if (columnIndex + 1 < allColumns.length && (_allColumns$groupPath2 = allColumns[columnIndex + 1].groupPath) != null && _allColumns$groupPath2.includes(groupId)) {\n          limitingGroupId = groupId;\n        }\n      }\n    });\n    forbiddenIndexes.current = {};\n\n    for (let indexToForbid = 0; indexToForbid < allColumns.length; indexToForbid += 1) {\n      const leftIndex = indexToForbid <= columnIndex ? indexToForbid - 1 : indexToForbid;\n      const rightIndex = indexToForbid < columnIndex ? indexToForbid : indexToForbid + 1;\n\n      if (limitingGroupId !== null) {\n        var _allColumns$leftIndex, _allColumns$rightInde;\n\n        // verify this indexToForbid will be linked to the limiting group. Otherwise forbid it\n        let allowIndex = false;\n\n        if (leftIndex >= 0 && (_allColumns$leftIndex = allColumns[leftIndex].groupPath) != null && _allColumns$leftIndex.includes(limitingGroupId)) {\n          allowIndex = true;\n        } else if (rightIndex < allColumns.length && (_allColumns$rightInde = allColumns[rightIndex].groupPath) != null && _allColumns$rightInde.includes(limitingGroupId)) {\n          allowIndex = true;\n        }\n\n        if (!allowIndex) {\n          forbiddenIndexes.current[indexToForbid] = true;\n        }\n      } // Verify we are not splitting another group\n\n\n      if (leftIndex >= 0 && rightIndex < allColumns.length) {\n        var _allColumns$rightInde2, _allColumns$rightInde3;\n\n        (_allColumns$rightInde2 = allColumns[rightIndex]) == null ? void 0 : (_allColumns$rightInde3 = _allColumns$rightInde2.groupPath) == null ? void 0 : _allColumns$rightInde3.forEach(groupId => {\n          var _allColumns$leftIndex2;\n\n          if ((_allColumns$leftIndex2 = allColumns[leftIndex].groupPath) != null && _allColumns$leftIndex2.includes(groupId)) {\n            if (!draggingColumnGroupPath.includes(groupId)) {\n              var _groupsLookup$groupId2;\n\n              // moving here split the group groupId in two distincts chunks\n              if (!((_groupsLookup$groupId2 = groupsLookup[groupId]) != null && _groupsLookup$groupId2.freeReordering)) {\n                forbiddenIndexes.current[indexToForbid] = true;\n              }\n            }\n          }\n        });\n      }\n    }\n  }, [props.disableColumnReorder, classes.columnHeaderDragging, logger, apiRef]);\n  const handleDragEnter = React.useCallback((params, event) => {\n    event.preventDefault(); // Prevent drag events propagation.\n    // For more information check here https://github.com/mui/mui-x/issues/2680.\n\n    event.stopPropagation();\n  }, []);\n  const handleDragOver = React.useCallback((params, event) => {\n    const dragColField = gridColumnReorderDragColSelector(apiRef);\n\n    if (!dragColField) {\n      return;\n    }\n\n    logger.debug(`Dragging over col ${params.field}`);\n    event.preventDefault(); // Prevent drag events propagation.\n    // For more information check here https://github.com/mui/mui-x/issues/2680.\n\n    event.stopPropagation();\n    const coordinates = {\n      x: event.clientX,\n      y: event.clientY\n    };\n\n    if (params.field !== dragColField && hasCursorPositionChanged(cursorPosition.current, coordinates)) {\n      const targetColIndex = apiRef.current.getColumnIndex(params.field, false);\n      const targetColVisibleIndex = apiRef.current.getColumnIndex(params.field, true);\n      const targetCol = apiRef.current.getColumn(params.field);\n      const dragColIndex = apiRef.current.getColumnIndex(dragColField, false);\n      const visibleColumns = apiRef.current.getVisibleColumns();\n      const allColumns = apiRef.current.getAllColumns();\n      const cursorMoveDirectionX = getCursorMoveDirectionX(cursorPosition.current, coordinates);\n      const hasMovedLeft = cursorMoveDirectionX === CURSOR_MOVE_DIRECTION_LEFT && targetColIndex < dragColIndex;\n      const hasMovedRight = cursorMoveDirectionX === CURSOR_MOVE_DIRECTION_RIGHT && dragColIndex < targetColIndex;\n\n      if (hasMovedLeft || hasMovedRight) {\n        let canBeReordered;\n        let indexOffsetInHiddenColumns = 0;\n\n        if (!targetCol.disableReorder) {\n          canBeReordered = true;\n        } else if (hasMovedLeft) {\n          canBeReordered = targetColVisibleIndex > 0 && !visibleColumns[targetColVisibleIndex - 1].disableReorder;\n        } else {\n          canBeReordered = targetColVisibleIndex < visibleColumns.length - 1 && !visibleColumns[targetColVisibleIndex + 1].disableReorder;\n        }\n\n        if (forbiddenIndexes.current[targetColIndex]) {\n          let nextVisibleColumnField;\n          let indexWithOffset = targetColIndex + indexOffsetInHiddenColumns;\n\n          if (hasMovedLeft) {\n            nextVisibleColumnField = targetColVisibleIndex > 0 ? visibleColumns[targetColVisibleIndex - 1].field : null;\n\n            while (indexWithOffset > 0 && allColumns[indexWithOffset].field !== nextVisibleColumnField && forbiddenIndexes.current[indexWithOffset]) {\n              indexOffsetInHiddenColumns -= 1;\n              indexWithOffset = targetColIndex + indexOffsetInHiddenColumns;\n            }\n          } else {\n            nextVisibleColumnField = targetColVisibleIndex + 1 < visibleColumns.length ? visibleColumns[targetColVisibleIndex + 1].field : null;\n\n            while (indexWithOffset < allColumns.length - 1 && allColumns[indexWithOffset].field !== nextVisibleColumnField && forbiddenIndexes.current[indexWithOffset]) {\n              indexOffsetInHiddenColumns += 1;\n              indexWithOffset = targetColIndex + indexOffsetInHiddenColumns;\n            }\n          }\n\n          if (forbiddenIndexes.current[indexWithOffset] || allColumns[indexWithOffset].field === nextVisibleColumnField) {\n            // If we ended up on a visible column, or a forbidden one, we can not do the reorder\n            canBeReordered = false;\n          }\n        }\n\n        const canBeReorderedProcessed = apiRef.current.unstable_applyPipeProcessors('canBeReordered', canBeReordered, {\n          targetIndex: targetColVisibleIndex\n        });\n\n        if (canBeReorderedProcessed) {\n          apiRef.current.setColumnIndex(dragColField, targetColIndex + indexOffsetInHiddenColumns);\n        }\n      }\n\n      cursorPosition.current = coordinates;\n    }\n  }, [apiRef, logger]);\n  const handleDragEnd = React.useCallback((params, event) => {\n    const dragColField = gridColumnReorderDragColSelector(apiRef);\n\n    if (props.disableColumnReorder || !dragColField) {\n      return;\n    }\n\n    logger.debug('End dragging col');\n    event.preventDefault(); // Prevent drag events propagation.\n    // For more information check here https://github.com/mui/mui-x/issues/2680.\n\n    event.stopPropagation();\n    clearTimeout(removeDnDStylesTimeout.current);\n    dragColNode.current = null; // Check if the column was dropped outside the grid.\n\n    if (event.dataTransfer.dropEffect === 'none') {\n      // Accessing params.field may contain the wrong field as header elements are reused\n      apiRef.current.setColumnIndex(dragColField, originColumnIndex.current);\n      originColumnIndex.current = null;\n    }\n\n    apiRef.current.setState(state => _extends({}, state, {\n      columnReorder: _extends({}, state.columnReorder, {\n        dragCol: ''\n      })\n    }));\n    apiRef.current.forceUpdate();\n  }, [props.disableColumnReorder, logger, apiRef]);\n  useGridApiEventHandler(apiRef, 'columnHeaderDragStart', handleDragStart);\n  useGridApiEventHandler(apiRef, 'columnHeaderDragEnter', handleDragEnter);\n  useGridApiEventHandler(apiRef, 'columnHeaderDragOver', handleDragOver);\n  useGridApiEventHandler(apiRef, 'columnHeaderDragEnd', handleDragEnd);\n  useGridApiEventHandler(apiRef, 'cellDragEnter', handleDragEnter);\n  useGridApiEventHandler(apiRef, 'cellDragOver', handleDragOver);\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}