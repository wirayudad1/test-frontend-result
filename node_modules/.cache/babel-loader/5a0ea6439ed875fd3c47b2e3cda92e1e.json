{"ast":null,"code":"import asyncWorker from './asyncWorker';\nexport function getRealGridData(rowLength, columns) {\n  return new Promise(resolve => {\n    const tasks = {\n      current: rowLength\n    };\n    const rows = [];\n    const indexedValues = {};\n\n    function work() {\n      const row = {};\n\n      for (let j = 0; j < columns.length; j += 1) {\n        const column = columns[j];\n\n        if (column.generateData) {\n          const context = {};\n\n          if (column.dataGeneratorUniquenessEnabled) {\n            let fieldValues = indexedValues[column.field];\n\n            if (!fieldValues) {\n              fieldValues = {};\n              indexedValues[column.field] = fieldValues;\n            }\n\n            context.values = fieldValues;\n          }\n\n          row[column.field] = column.generateData(row, context);\n        }\n      }\n\n      rows.push(row);\n      tasks.current -= 1;\n    }\n\n    const columnVisibilityModel = {};\n    columns.forEach(col => {\n      if (col.hide) {\n        columnVisibilityModel[col.field] = false;\n      }\n    });\n    asyncWorker({\n      work,\n      done: () => resolve({\n        columns,\n        rows,\n        initialState: {\n          columns: {\n            columnVisibilityModel\n          }\n        }\n      }),\n      tasks\n    });\n  });\n}","map":{"version":3,"names":["asyncWorker","getRealGridData","rowLength","columns","Promise","resolve","tasks","current","rows","indexedValues","work","row","j","length","column","generateData","context","dataGeneratorUniquenessEnabled","fieldValues","field","values","push","columnVisibilityModel","forEach","col","hide","done","initialState"],"sources":["/Users/dewan03/project/project/node_modules/@mui/x-data-grid-generator/services/real-data-service.js"],"sourcesContent":["import asyncWorker from './asyncWorker';\nexport function getRealGridData(rowLength, columns) {\n  return new Promise(resolve => {\n    const tasks = {\n      current: rowLength\n    };\n    const rows = [];\n    const indexedValues = {};\n\n    function work() {\n      const row = {};\n\n      for (let j = 0; j < columns.length; j += 1) {\n        const column = columns[j];\n\n        if (column.generateData) {\n          const context = {};\n\n          if (column.dataGeneratorUniquenessEnabled) {\n            let fieldValues = indexedValues[column.field];\n\n            if (!fieldValues) {\n              fieldValues = {};\n              indexedValues[column.field] = fieldValues;\n            }\n\n            context.values = fieldValues;\n          }\n\n          row[column.field] = column.generateData(row, context);\n        }\n      }\n\n      rows.push(row);\n      tasks.current -= 1;\n    }\n\n    const columnVisibilityModel = {};\n    columns.forEach(col => {\n      if (col.hide) {\n        columnVisibilityModel[col.field] = false;\n      }\n    });\n    asyncWorker({\n      work,\n      done: () => resolve({\n        columns,\n        rows,\n        initialState: {\n          columns: {\n            columnVisibilityModel\n          }\n        }\n      }),\n      tasks\n    });\n  });\n}"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,eAAxB;AACA,OAAO,SAASC,eAAT,CAAyBC,SAAzB,EAAoCC,OAApC,EAA6C;EAClD,OAAO,IAAIC,OAAJ,CAAYC,OAAO,IAAI;IAC5B,MAAMC,KAAK,GAAG;MACZC,OAAO,EAAEL;IADG,CAAd;IAGA,MAAMM,IAAI,GAAG,EAAb;IACA,MAAMC,aAAa,GAAG,EAAtB;;IAEA,SAASC,IAAT,GAAgB;MACd,MAAMC,GAAG,GAAG,EAAZ;;MAEA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGT,OAAO,CAACU,MAA5B,EAAoCD,CAAC,IAAI,CAAzC,EAA4C;QAC1C,MAAME,MAAM,GAAGX,OAAO,CAACS,CAAD,CAAtB;;QAEA,IAAIE,MAAM,CAACC,YAAX,EAAyB;UACvB,MAAMC,OAAO,GAAG,EAAhB;;UAEA,IAAIF,MAAM,CAACG,8BAAX,EAA2C;YACzC,IAAIC,WAAW,GAAGT,aAAa,CAACK,MAAM,CAACK,KAAR,CAA/B;;YAEA,IAAI,CAACD,WAAL,EAAkB;cAChBA,WAAW,GAAG,EAAd;cACAT,aAAa,CAACK,MAAM,CAACK,KAAR,CAAb,GAA8BD,WAA9B;YACD;;YAEDF,OAAO,CAACI,MAAR,GAAiBF,WAAjB;UACD;;UAEDP,GAAG,CAACG,MAAM,CAACK,KAAR,CAAH,GAAoBL,MAAM,CAACC,YAAP,CAAoBJ,GAApB,EAAyBK,OAAzB,CAApB;QACD;MACF;;MAEDR,IAAI,CAACa,IAAL,CAAUV,GAAV;MACAL,KAAK,CAACC,OAAN,IAAiB,CAAjB;IACD;;IAED,MAAMe,qBAAqB,GAAG,EAA9B;IACAnB,OAAO,CAACoB,OAAR,CAAgBC,GAAG,IAAI;MACrB,IAAIA,GAAG,CAACC,IAAR,EAAc;QACZH,qBAAqB,CAACE,GAAG,CAACL,KAAL,CAArB,GAAmC,KAAnC;MACD;IACF,CAJD;IAKAnB,WAAW,CAAC;MACVU,IADU;MAEVgB,IAAI,EAAE,MAAMrB,OAAO,CAAC;QAClBF,OADkB;QAElBK,IAFkB;QAGlBmB,YAAY,EAAE;UACZxB,OAAO,EAAE;YACPmB;UADO;QADG;MAHI,CAAD,CAFT;MAWVhB;IAXU,CAAD,CAAX;EAaD,CAtDM,CAAP;AAuDD"},"metadata":{},"sourceType":"module"}