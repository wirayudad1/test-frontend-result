{"ast":null,"code":"import * as React from 'react';\nimport { unstable_composeClasses as composeClasses } from '@mui/material';\nimport { useGridLogger, useGridApiEventHandler, getDataGridUtilityClass, useGridSelector, gridSortModelSelector, gridRowTreeDepthSelector, useGridApiOptionHandler, gridEditRowsStateSelector } from '@mui/x-data-grid';\n\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    rowDragging: ['row--dragging']\n  };\n  return composeClasses(slots, getDataGridUtilityClass, classes);\n};\n/**\n * Only available in DataGridPro\n * @requires useGridRows (method)\n */\n\n\nexport const useGridRowReorder = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridRowReorder');\n  const sortModel = useGridSelector(apiRef, gridSortModelSelector);\n  const treeDepth = useGridSelector(apiRef, gridRowTreeDepthSelector);\n  const dragRowNode = React.useRef(null);\n  const originRowIndex = React.useRef(null);\n  const removeDnDStylesTimeout = React.useRef();\n  const ownerState = {\n    classes: props.classes\n  };\n  const classes = useUtilityClasses(ownerState);\n  const [dragRowId, setDragRowId] = React.useState('');\n  React.useEffect(() => {\n    return () => {\n      clearTimeout(removeDnDStylesTimeout.current);\n    };\n  }, []); // TODO: remove sortModel check once row reorder is sorting compatible\n  // remove treeDepth once row reorder is tree compatible\n\n  const isRowReorderDisabled = React.useMemo(() => {\n    return !props.rowReordering || !!sortModel.length || treeDepth !== 1;\n  }, [props.rowReordering, sortModel, treeDepth]);\n  const handleDragStart = React.useCallback((params, event) => {\n    // Call the gridEditRowsStateSelector directly to avoid infnite loop\n    const editRowsState = gridEditRowsStateSelector(apiRef.current.state);\n\n    if (isRowReorderDisabled || Object.keys(editRowsState).length !== 0) {\n      return;\n    }\n\n    logger.debug(`Start dragging row ${params.id}`); // Prevent drag events propagation.\n    // For more information check here https://github.com/mui/mui-x/issues/2680.\n\n    event.stopPropagation();\n    dragRowNode.current = event.currentTarget;\n    dragRowNode.current.classList.add(classes.rowDragging);\n    setDragRowId(params.id);\n    removeDnDStylesTimeout.current = setTimeout(() => {\n      dragRowNode.current.classList.remove(classes.rowDragging);\n    });\n    originRowIndex.current = apiRef.current.getRowIndex(params.id);\n  }, [isRowReorderDisabled, classes.rowDragging, logger, apiRef]);\n  const handleDragOver = React.useCallback((params, event) => {\n    var _apiRef$current$getRo;\n\n    if (dragRowId === '') {\n      return;\n    }\n\n    if ((_apiRef$current$getRo = apiRef.current.getRowNode(params.id)) != null && _apiRef$current$getRo.isPinned) {\n      return;\n    }\n\n    logger.debug(`Dragging over row ${params.id}`);\n    event.preventDefault(); // Prevent drag events propagation.\n    // For more information check here https://github.com/mui/mui-x/issues/2680.\n\n    event.stopPropagation();\n\n    if (params.id !== dragRowId) {\n      const targetRowIndex = apiRef.current.getRowIndex(params.id);\n      apiRef.current.setRowIndex(dragRowId, targetRowIndex);\n    }\n  }, [apiRef, logger, dragRowId]);\n  const handleDragEnd = React.useCallback((params, event) => {\n    // Call the gridEditRowsStateSelector directly to avoid infnite loop\n    const editRowsState = gridEditRowsStateSelector(apiRef.current.state);\n\n    if (dragRowId === '' || isRowReorderDisabled || Object.keys(editRowsState).length !== 0) {\n      return;\n    }\n\n    logger.debug('End dragging row');\n    event.preventDefault(); // Prevent drag events propagation.\n    // For more information check here https://github.com/mui/mui-x/issues/2680.\n\n    event.stopPropagation();\n    clearTimeout(removeDnDStylesTimeout.current);\n    dragRowNode.current = null; // Check if the row was dropped outside the grid.\n\n    if (event.dataTransfer.dropEffect === 'none') {\n      // Accessing params.field may contain the wrong field as header elements are reused\n      apiRef.current.setRowIndex(dragRowId, originRowIndex.current);\n      originRowIndex.current = null;\n    } else {\n      // Emit the rowOrderChange event only once when the reordering stops.\n      const rowOrderChangeParams = {\n        row: apiRef.current.getRow(dragRowId),\n        targetIndex: apiRef.current.getRowIndex(params.id),\n        oldIndex: originRowIndex.current\n      };\n      apiRef.current.publishEvent('rowOrderChange', rowOrderChangeParams);\n    }\n\n    setDragRowId('');\n  }, [isRowReorderDisabled, logger, apiRef, dragRowId]);\n  useGridApiEventHandler(apiRef, 'rowDragStart', handleDragStart);\n  useGridApiEventHandler(apiRef, 'rowDragOver', handleDragOver);\n  useGridApiEventHandler(apiRef, 'rowDragEnd', handleDragEnd);\n  useGridApiEventHandler(apiRef, 'cellDragOver', handleDragOver);\n  useGridApiOptionHandler(apiRef, 'rowOrderChange', props.onRowOrderChange);\n};","map":{"version":3,"names":["React","unstable_composeClasses","composeClasses","useGridLogger","useGridApiEventHandler","getDataGridUtilityClass","useGridSelector","gridSortModelSelector","gridRowTreeDepthSelector","useGridApiOptionHandler","gridEditRowsStateSelector","useUtilityClasses","ownerState","classes","slots","rowDragging","useGridRowReorder","apiRef","props","logger","sortModel","treeDepth","dragRowNode","useRef","originRowIndex","removeDnDStylesTimeout","dragRowId","setDragRowId","useState","useEffect","clearTimeout","current","isRowReorderDisabled","useMemo","rowReordering","length","handleDragStart","useCallback","params","event","editRowsState","state","Object","keys","debug","id","stopPropagation","currentTarget","classList","add","setTimeout","remove","getRowIndex","handleDragOver","_apiRef$current$getRo","getRowNode","isPinned","preventDefault","targetRowIndex","setRowIndex","handleDragEnd","dataTransfer","dropEffect","rowOrderChangeParams","row","getRow","targetIndex","oldIndex","publishEvent","onRowOrderChange"],"sources":["/Users/dewan03/project/project/node_modules/@mui/x-data-grid-pro/hooks/features/rowReorder/useGridRowReorder.js"],"sourcesContent":["import * as React from 'react';\nimport { unstable_composeClasses as composeClasses } from '@mui/material';\nimport { useGridLogger, useGridApiEventHandler, getDataGridUtilityClass, useGridSelector, gridSortModelSelector, gridRowTreeDepthSelector, useGridApiOptionHandler, gridEditRowsStateSelector } from '@mui/x-data-grid';\n\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    rowDragging: ['row--dragging']\n  };\n  return composeClasses(slots, getDataGridUtilityClass, classes);\n};\n/**\n * Only available in DataGridPro\n * @requires useGridRows (method)\n */\n\n\nexport const useGridRowReorder = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridRowReorder');\n  const sortModel = useGridSelector(apiRef, gridSortModelSelector);\n  const treeDepth = useGridSelector(apiRef, gridRowTreeDepthSelector);\n  const dragRowNode = React.useRef(null);\n  const originRowIndex = React.useRef(null);\n  const removeDnDStylesTimeout = React.useRef();\n  const ownerState = {\n    classes: props.classes\n  };\n  const classes = useUtilityClasses(ownerState);\n  const [dragRowId, setDragRowId] = React.useState('');\n  React.useEffect(() => {\n    return () => {\n      clearTimeout(removeDnDStylesTimeout.current);\n    };\n  }, []); // TODO: remove sortModel check once row reorder is sorting compatible\n  // remove treeDepth once row reorder is tree compatible\n\n  const isRowReorderDisabled = React.useMemo(() => {\n    return !props.rowReordering || !!sortModel.length || treeDepth !== 1;\n  }, [props.rowReordering, sortModel, treeDepth]);\n  const handleDragStart = React.useCallback((params, event) => {\n    // Call the gridEditRowsStateSelector directly to avoid infnite loop\n    const editRowsState = gridEditRowsStateSelector(apiRef.current.state);\n\n    if (isRowReorderDisabled || Object.keys(editRowsState).length !== 0) {\n      return;\n    }\n\n    logger.debug(`Start dragging row ${params.id}`); // Prevent drag events propagation.\n    // For more information check here https://github.com/mui/mui-x/issues/2680.\n\n    event.stopPropagation();\n    dragRowNode.current = event.currentTarget;\n    dragRowNode.current.classList.add(classes.rowDragging);\n    setDragRowId(params.id);\n    removeDnDStylesTimeout.current = setTimeout(() => {\n      dragRowNode.current.classList.remove(classes.rowDragging);\n    });\n    originRowIndex.current = apiRef.current.getRowIndex(params.id);\n  }, [isRowReorderDisabled, classes.rowDragging, logger, apiRef]);\n  const handleDragOver = React.useCallback((params, event) => {\n    var _apiRef$current$getRo;\n\n    if (dragRowId === '') {\n      return;\n    }\n\n    if ((_apiRef$current$getRo = apiRef.current.getRowNode(params.id)) != null && _apiRef$current$getRo.isPinned) {\n      return;\n    }\n\n    logger.debug(`Dragging over row ${params.id}`);\n    event.preventDefault(); // Prevent drag events propagation.\n    // For more information check here https://github.com/mui/mui-x/issues/2680.\n\n    event.stopPropagation();\n\n    if (params.id !== dragRowId) {\n      const targetRowIndex = apiRef.current.getRowIndex(params.id);\n      apiRef.current.setRowIndex(dragRowId, targetRowIndex);\n    }\n  }, [apiRef, logger, dragRowId]);\n  const handleDragEnd = React.useCallback((params, event) => {\n    // Call the gridEditRowsStateSelector directly to avoid infnite loop\n    const editRowsState = gridEditRowsStateSelector(apiRef.current.state);\n\n    if (dragRowId === '' || isRowReorderDisabled || Object.keys(editRowsState).length !== 0) {\n      return;\n    }\n\n    logger.debug('End dragging row');\n    event.preventDefault(); // Prevent drag events propagation.\n    // For more information check here https://github.com/mui/mui-x/issues/2680.\n\n    event.stopPropagation();\n    clearTimeout(removeDnDStylesTimeout.current);\n    dragRowNode.current = null; // Check if the row was dropped outside the grid.\n\n    if (event.dataTransfer.dropEffect === 'none') {\n      // Accessing params.field may contain the wrong field as header elements are reused\n      apiRef.current.setRowIndex(dragRowId, originRowIndex.current);\n      originRowIndex.current = null;\n    } else {\n      // Emit the rowOrderChange event only once when the reordering stops.\n      const rowOrderChangeParams = {\n        row: apiRef.current.getRow(dragRowId),\n        targetIndex: apiRef.current.getRowIndex(params.id),\n        oldIndex: originRowIndex.current\n      };\n      apiRef.current.publishEvent('rowOrderChange', rowOrderChangeParams);\n    }\n\n    setDragRowId('');\n  }, [isRowReorderDisabled, logger, apiRef, dragRowId]);\n  useGridApiEventHandler(apiRef, 'rowDragStart', handleDragStart);\n  useGridApiEventHandler(apiRef, 'rowDragOver', handleDragOver);\n  useGridApiEventHandler(apiRef, 'rowDragEnd', handleDragEnd);\n  useGridApiEventHandler(apiRef, 'cellDragOver', handleDragOver);\n  useGridApiOptionHandler(apiRef, 'rowOrderChange', props.onRowOrderChange);\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}