{"ast":null,"code":"import { base64Decode, base64Encode } from '../encoding/base64';\nimport { md5 } from '../encoding/md5';\nimport { LicenseStatus } from '../utils/licenseStatus';\nimport { LICENSE_SCOPES } from '../utils/licenseScope';\nimport { LICENSING_MODELS } from '../utils/licensingModel';\n\nconst getDefaultReleaseDate = () => {\n  const today = new Date();\n  today.setHours(0, 0, 0, 0);\n  return today;\n};\n\nexport function generateReleaseInfo() {\n  let releaseDate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getDefaultReleaseDate();\n  return base64Encode(releaseDate.getTime().toString());\n}\nconst expiryReg = /^.*EXPIRY=([0-9]+),.*$/;\n/**\n * Format: ORDER:${orderNumber},EXPIRY=${expiryTimestamp},KEYVERSION=1\n */\n\nconst decodeLicenseVersion1 = license => {\n  let expiryTimestamp;\n\n  try {\n    expiryTimestamp = parseInt(license.match(expiryReg)[1], 10);\n\n    if (!expiryTimestamp || Number.isNaN(expiryTimestamp)) {\n      expiryTimestamp = null;\n    }\n  } catch (err) {\n    expiryTimestamp = null;\n  }\n\n  return {\n    scope: 'pro',\n    licensingModel: 'perpetual',\n    expiryTimestamp\n  };\n};\n/**\n * Format: O=${orderNumber},E=${expiryTimestamp},S=${scope},LM=${licensingModel},KV=2`;\n */\n\n\nconst decodeLicenseVersion2 = license => {\n  const licenseInfo = {\n    scope: null,\n    licensingModel: null,\n    expiryTimestamp: null\n  };\n  license.split(',').map(token => token.split('=')).filter(el => el.length === 2).forEach(_ref => {\n    let [key, value] = _ref;\n\n    if (key === 'S') {\n      licenseInfo.scope = value;\n    }\n\n    if (key === 'LM') {\n      licenseInfo.licensingModel = value;\n    }\n\n    if (key === 'E') {\n      const expiryTimestamp = parseInt(value, 10);\n\n      if (expiryTimestamp && !Number.isNaN(expiryTimestamp)) {\n        licenseInfo.expiryTimestamp = expiryTimestamp;\n      }\n    }\n  });\n  return licenseInfo;\n};\n/**\n * Decode the license based on its key version and return a version-agnostic `MuiLicense` object.\n */\n\n\nconst decodeLicense = encodedLicense => {\n  const license = base64Decode(encodedLicense);\n\n  if (license.includes('KEYVERSION=1')) {\n    return decodeLicenseVersion1(license);\n  }\n\n  if (license.includes('KV=2')) {\n    return decodeLicenseVersion2(license);\n  }\n\n  return null;\n};\n\nexport function verifyLicense(_ref2) {\n  let {\n    releaseInfo,\n    licenseKey,\n    acceptedScopes,\n    isProduction\n  } = _ref2;\n\n  if (!releaseInfo) {\n    throw new Error('MUI: The release information is missing. Not able to validate license.');\n  }\n\n  if (!licenseKey) {\n    return LicenseStatus.NotFound;\n  }\n\n  const hash = licenseKey.substr(0, 32);\n  const encoded = licenseKey.substr(32);\n\n  if (hash !== md5(encoded)) {\n    return LicenseStatus.Invalid;\n  }\n\n  const license = decodeLicense(encoded);\n\n  if (license == null) {\n    console.error('Error checking license. Key version not found!');\n    return LicenseStatus.Invalid;\n  }\n\n  if (license.licensingModel == null || !LICENSING_MODELS.includes(license.licensingModel)) {\n    console.error('Error checking license. Sales model not found or invalid!');\n    return LicenseStatus.Invalid;\n  }\n\n  if (license.expiryTimestamp == null) {\n    console.error('Error checking license. Expiry timestamp not found or invalid!');\n    return LicenseStatus.Invalid;\n  }\n\n  if (license.licensingModel === 'perpetual' || isProduction) {\n    const pkgTimestamp = parseInt(base64Decode(releaseInfo), 10);\n\n    if (Number.isNaN(pkgTimestamp)) {\n      throw new Error('MUI: The release information is invalid. Not able to validate license.');\n    }\n\n    if (license.expiryTimestamp < pkgTimestamp) {\n      return LicenseStatus.Expired;\n    }\n  } else if (license.licensingModel === 'subscription') {\n    if (license.expiryTimestamp < new Date().getTime()) {\n      return LicenseStatus.Expired;\n    }\n  }\n\n  if (license.scope == null || !LICENSE_SCOPES.includes(license.scope)) {\n    console.error('Error checking license. scope not found or invalid!');\n    return LicenseStatus.Invalid;\n  }\n\n  if (!acceptedScopes.includes(license.scope)) {\n    return LicenseStatus.Invalid;\n  }\n\n  return LicenseStatus.Valid;\n}","map":{"version":3,"names":["base64Decode","base64Encode","md5","LicenseStatus","LICENSE_SCOPES","LICENSING_MODELS","getDefaultReleaseDate","today","Date","setHours","generateReleaseInfo","releaseDate","getTime","toString","expiryReg","decodeLicenseVersion1","license","expiryTimestamp","parseInt","match","Number","isNaN","err","scope","licensingModel","decodeLicenseVersion2","licenseInfo","split","map","token","filter","el","length","forEach","key","value","decodeLicense","encodedLicense","includes","verifyLicense","releaseInfo","licenseKey","acceptedScopes","isProduction","Error","NotFound","hash","substr","encoded","Invalid","console","error","pkgTimestamp","Expired","Valid"],"sources":["/Users/dewan03/project/project/node_modules/@mui/x-license-pro/verifyLicense/verifyLicense.js"],"sourcesContent":["import { base64Decode, base64Encode } from '../encoding/base64';\nimport { md5 } from '../encoding/md5';\nimport { LicenseStatus } from '../utils/licenseStatus';\nimport { LICENSE_SCOPES } from '../utils/licenseScope';\nimport { LICENSING_MODELS } from '../utils/licensingModel';\n\nconst getDefaultReleaseDate = () => {\n  const today = new Date();\n  today.setHours(0, 0, 0, 0);\n  return today;\n};\n\nexport function generateReleaseInfo(releaseDate = getDefaultReleaseDate()) {\n  return base64Encode(releaseDate.getTime().toString());\n}\nconst expiryReg = /^.*EXPIRY=([0-9]+),.*$/;\n\n/**\n * Format: ORDER:${orderNumber},EXPIRY=${expiryTimestamp},KEYVERSION=1\n */\nconst decodeLicenseVersion1 = license => {\n  let expiryTimestamp;\n\n  try {\n    expiryTimestamp = parseInt(license.match(expiryReg)[1], 10);\n\n    if (!expiryTimestamp || Number.isNaN(expiryTimestamp)) {\n      expiryTimestamp = null;\n    }\n  } catch (err) {\n    expiryTimestamp = null;\n  }\n\n  return {\n    scope: 'pro',\n    licensingModel: 'perpetual',\n    expiryTimestamp\n  };\n};\n/**\n * Format: O=${orderNumber},E=${expiryTimestamp},S=${scope},LM=${licensingModel},KV=2`;\n */\n\n\nconst decodeLicenseVersion2 = license => {\n  const licenseInfo = {\n    scope: null,\n    licensingModel: null,\n    expiryTimestamp: null\n  };\n  license.split(',').map(token => token.split('=')).filter(el => el.length === 2).forEach(([key, value]) => {\n    if (key === 'S') {\n      licenseInfo.scope = value;\n    }\n\n    if (key === 'LM') {\n      licenseInfo.licensingModel = value;\n    }\n\n    if (key === 'E') {\n      const expiryTimestamp = parseInt(value, 10);\n\n      if (expiryTimestamp && !Number.isNaN(expiryTimestamp)) {\n        licenseInfo.expiryTimestamp = expiryTimestamp;\n      }\n    }\n  });\n  return licenseInfo;\n};\n/**\n * Decode the license based on its key version and return a version-agnostic `MuiLicense` object.\n */\n\n\nconst decodeLicense = encodedLicense => {\n  const license = base64Decode(encodedLicense);\n\n  if (license.includes('KEYVERSION=1')) {\n    return decodeLicenseVersion1(license);\n  }\n\n  if (license.includes('KV=2')) {\n    return decodeLicenseVersion2(license);\n  }\n\n  return null;\n};\n\nexport function verifyLicense({\n  releaseInfo,\n  licenseKey,\n  acceptedScopes,\n  isProduction\n}) {\n  if (!releaseInfo) {\n    throw new Error('MUI: The release information is missing. Not able to validate license.');\n  }\n\n  if (!licenseKey) {\n    return LicenseStatus.NotFound;\n  }\n\n  const hash = licenseKey.substr(0, 32);\n  const encoded = licenseKey.substr(32);\n\n  if (hash !== md5(encoded)) {\n    return LicenseStatus.Invalid;\n  }\n\n  const license = decodeLicense(encoded);\n\n  if (license == null) {\n    console.error('Error checking license. Key version not found!');\n    return LicenseStatus.Invalid;\n  }\n\n  if (license.licensingModel == null || !LICENSING_MODELS.includes(license.licensingModel)) {\n    console.error('Error checking license. Sales model not found or invalid!');\n    return LicenseStatus.Invalid;\n  }\n\n  if (license.expiryTimestamp == null) {\n    console.error('Error checking license. Expiry timestamp not found or invalid!');\n    return LicenseStatus.Invalid;\n  }\n\n  if (license.licensingModel === 'perpetual' || isProduction) {\n    const pkgTimestamp = parseInt(base64Decode(releaseInfo), 10);\n\n    if (Number.isNaN(pkgTimestamp)) {\n      throw new Error('MUI: The release information is invalid. Not able to validate license.');\n    }\n\n    if (license.expiryTimestamp < pkgTimestamp) {\n      return LicenseStatus.Expired;\n    }\n  } else if (license.licensingModel === 'subscription') {\n    if (license.expiryTimestamp < new Date().getTime()) {\n      return LicenseStatus.Expired;\n    }\n  }\n\n  if (license.scope == null || !LICENSE_SCOPES.includes(license.scope)) {\n    console.error('Error checking license. scope not found or invalid!');\n    return LicenseStatus.Invalid;\n  }\n\n  if (!acceptedScopes.includes(license.scope)) {\n    return LicenseStatus.Invalid;\n  }\n\n  return LicenseStatus.Valid;\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}