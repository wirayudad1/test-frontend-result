{"ast":null,"code":"import * as React from 'react';\nimport Box from '@mui/material/Box';\nimport Rating from '@mui/material/Rating';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst RatingValue = /*#__PURE__*/React.memo(function RatingValue(props) {\n  const {\n    value\n  } = props;\n  return /*#__PURE__*/_jsxs(Box, {\n    sx: {\n      display: 'flex',\n      alignItems: 'center',\n      lineHeight: '24px',\n      color: 'text.secondary'\n    },\n    children: [/*#__PURE__*/_jsx(Rating, {\n      value: value,\n      sx: {\n        mr: 1\n      },\n      readOnly: true\n    }), \" \", Math.round(Number(value) * 10) / 10]\n  });\n});\nexport function renderRating(params) {\n  if (params.value == null) {\n    return '';\n  } // If the aggregated value does not have the same unit as the other cell\n  // Then we fall back to the default rendering based on `valueGetter` instead of rendering the total price UI.\n\n\n  if (params.aggregation && !params.aggregation.hasCellUnit) {\n    return null;\n  }\n\n  return /*#__PURE__*/_jsx(RatingValue, {\n    value: params.value\n  });\n}","map":{"version":3,"names":["React","Box","Rating","jsx","_jsx","jsxs","_jsxs","RatingValue","memo","props","value","sx","display","alignItems","lineHeight","color","children","mr","readOnly","Math","round","Number","renderRating","params","aggregation","hasCellUnit"],"sources":["/Users/dewan03/project/project/node_modules/@mui/x-data-grid-generator/renderer/renderRating.js"],"sourcesContent":["import * as React from 'react';\nimport Box from '@mui/material/Box';\nimport Rating from '@mui/material/Rating';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst RatingValue = /*#__PURE__*/React.memo(function RatingValue(props) {\n  const {\n    value\n  } = props;\n  return /*#__PURE__*/_jsxs(Box, {\n    sx: {\n      display: 'flex',\n      alignItems: 'center',\n      lineHeight: '24px',\n      color: 'text.secondary'\n    },\n    children: [/*#__PURE__*/_jsx(Rating, {\n      value: value,\n      sx: {\n        mr: 1\n      },\n      readOnly: true\n    }), \" \", Math.round(Number(value) * 10) / 10]\n  });\n});\nexport function renderRating(params) {\n  if (params.value == null) {\n    return '';\n  } // If the aggregated value does not have the same unit as the other cell\n  // Then we fall back to the default rendering based on `valueGetter` instead of rendering the total price UI.\n\n\n  if (params.aggregation && !params.aggregation.hasCellUnit) {\n    return null;\n  }\n\n  return /*#__PURE__*/_jsx(RatingValue, {\n    value: params.value\n  });\n}"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,GAAP,MAAgB,mBAAhB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,SAASC,GAAG,IAAIC,IAAhB,QAA4B,mBAA5B;AACA,SAASC,IAAI,IAAIC,KAAjB,QAA8B,mBAA9B;AACA,MAAMC,WAAW,GAAG,aAAaP,KAAK,CAACQ,IAAN,CAAW,SAASD,WAAT,CAAqBE,KAArB,EAA4B;EACtE,MAAM;IACJC;EADI,IAEFD,KAFJ;EAGA,OAAO,aAAaH,KAAK,CAACL,GAAD,EAAM;IAC7BU,EAAE,EAAE;MACFC,OAAO,EAAE,MADP;MAEFC,UAAU,EAAE,QAFV;MAGFC,UAAU,EAAE,MAHV;MAIFC,KAAK,EAAE;IAJL,CADyB;IAO7BC,QAAQ,EAAE,CAAC,aAAaZ,IAAI,CAACF,MAAD,EAAS;MACnCQ,KAAK,EAAEA,KAD4B;MAEnCC,EAAE,EAAE;QACFM,EAAE,EAAE;MADF,CAF+B;MAKnCC,QAAQ,EAAE;IALyB,CAAT,CAAlB,EAMN,GANM,EAMDC,IAAI,CAACC,KAAL,CAAWC,MAAM,CAACX,KAAD,CAAN,GAAgB,EAA3B,IAAiC,EANhC;EAPmB,CAAN,CAAzB;AAeD,CAnBgC,CAAjC;AAoBA,OAAO,SAASY,YAAT,CAAsBC,MAAtB,EAA8B;EACnC,IAAIA,MAAM,CAACb,KAAP,IAAgB,IAApB,EAA0B;IACxB,OAAO,EAAP;EACD,CAHkC,CAGjC;EACF;;;EAGA,IAAIa,MAAM,CAACC,WAAP,IAAsB,CAACD,MAAM,CAACC,WAAP,CAAmBC,WAA9C,EAA2D;IACzD,OAAO,IAAP;EACD;;EAED,OAAO,aAAarB,IAAI,CAACG,WAAD,EAAc;IACpCG,KAAK,EAAEa,MAAM,CAACb;EADsB,CAAd,CAAxB;AAGD"},"metadata":{},"sourceType":"module"}