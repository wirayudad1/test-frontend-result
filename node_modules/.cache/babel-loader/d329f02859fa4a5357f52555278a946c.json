{"ast":null,"code":"export const sortRowTree = params => {\n  const {\n    rowIds,\n    rowTree,\n    disableChildrenSorting,\n    sortRowList\n  } = params;\n  let sortedRows = []; // Group the rows by parent\n\n  const groupedByParentRows = new Map([[null, {\n    body: [],\n    footer: null\n  }]]);\n\n  for (let i = 0; i < rowIds.length; i += 1) {\n    const rowId = rowIds[i];\n    const node = rowTree[rowId];\n    let group = groupedByParentRows.get(node.parent);\n\n    if (!group) {\n      group = {\n        body: [],\n        footer: null\n      };\n      groupedByParentRows.set(node.parent, group);\n    }\n\n    if (node.position === 'footer') {\n      group.footer = node;\n    } else {\n      group.body.push(node);\n    }\n  } // Apply the sorting to each list of children\n\n\n  const sortedGroupedByParentRows = new Map();\n  groupedByParentRows.forEach((group, parent) => {\n    if (group.body.length === 0) {\n      sortedGroupedByParentRows.set(parent, []);\n    } else {\n      let groupSortedRows;\n      const depth = group.body[0].depth;\n\n      if (depth > 0 && disableChildrenSorting || !sortRowList) {\n        groupSortedRows = group.body.map(row => row.id);\n      } else {\n        groupSortedRows = sortRowList(group.body);\n      }\n\n      if (group.footer != null) {\n        groupSortedRows.push(group.footer.id);\n      }\n\n      sortedGroupedByParentRows.set(parent, groupSortedRows);\n    }\n  }); // Flatten the sorted lists to have children just after their parent\n\n  const insertRowListIntoSortedRows = (startIndex, rowList) => {\n    sortedRows = [...sortedRows.slice(0, startIndex), ...rowList, ...sortedRows.slice(startIndex)];\n    let treeSize = 0;\n    rowList.forEach(rowId => {\n      treeSize += 1;\n      const children = sortedGroupedByParentRows.get(rowId);\n\n      if (children != null && children.length) {\n        const subTreeSize = insertRowListIntoSortedRows(startIndex + treeSize, children);\n        treeSize += subTreeSize;\n      }\n    });\n    return treeSize;\n  };\n\n  insertRowListIntoSortedRows(0, sortedGroupedByParentRows.get(null));\n  return sortedRows;\n};","map":{"version":3,"names":["sortRowTree","params","rowIds","rowTree","disableChildrenSorting","sortRowList","sortedRows","groupedByParentRows","Map","body","footer","i","length","rowId","node","group","get","parent","set","position","push","sortedGroupedByParentRows","forEach","groupSortedRows","depth","map","row","id","insertRowListIntoSortedRows","startIndex","rowList","slice","treeSize","children","subTreeSize"],"sources":["/Users/dewan03/project/project/node_modules/@mui/x-data-grid-pro/utils/tree/sortRowTree.js"],"sourcesContent":["export const sortRowTree = params => {\n  const {\n    rowIds,\n    rowTree,\n    disableChildrenSorting,\n    sortRowList\n  } = params;\n  let sortedRows = []; // Group the rows by parent\n\n  const groupedByParentRows = new Map([[null, {\n    body: [],\n    footer: null\n  }]]);\n\n  for (let i = 0; i < rowIds.length; i += 1) {\n    const rowId = rowIds[i];\n    const node = rowTree[rowId];\n    let group = groupedByParentRows.get(node.parent);\n\n    if (!group) {\n      group = {\n        body: [],\n        footer: null\n      };\n      groupedByParentRows.set(node.parent, group);\n    }\n\n    if (node.position === 'footer') {\n      group.footer = node;\n    } else {\n      group.body.push(node);\n    }\n  } // Apply the sorting to each list of children\n\n\n  const sortedGroupedByParentRows = new Map();\n  groupedByParentRows.forEach((group, parent) => {\n    if (group.body.length === 0) {\n      sortedGroupedByParentRows.set(parent, []);\n    } else {\n      let groupSortedRows;\n      const depth = group.body[0].depth;\n\n      if (depth > 0 && disableChildrenSorting || !sortRowList) {\n        groupSortedRows = group.body.map(row => row.id);\n      } else {\n        groupSortedRows = sortRowList(group.body);\n      }\n\n      if (group.footer != null) {\n        groupSortedRows.push(group.footer.id);\n      }\n\n      sortedGroupedByParentRows.set(parent, groupSortedRows);\n    }\n  }); // Flatten the sorted lists to have children just after their parent\n\n  const insertRowListIntoSortedRows = (startIndex, rowList) => {\n    sortedRows = [...sortedRows.slice(0, startIndex), ...rowList, ...sortedRows.slice(startIndex)];\n    let treeSize = 0;\n    rowList.forEach(rowId => {\n      treeSize += 1;\n      const children = sortedGroupedByParentRows.get(rowId);\n\n      if (children != null && children.length) {\n        const subTreeSize = insertRowListIntoSortedRows(startIndex + treeSize, children);\n        treeSize += subTreeSize;\n      }\n    });\n    return treeSize;\n  };\n\n  insertRowListIntoSortedRows(0, sortedGroupedByParentRows.get(null));\n  return sortedRows;\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}