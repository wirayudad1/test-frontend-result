{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { ownerDocument, useEventCallback } from '@mui/material/utils';\nimport { gridClasses, useGridApiEventHandler, useGridApiOptionHandler, useGridNativeEventListener, useGridLogger } from '@mui/x-data-grid';\nimport { clamp, findParentElementFromClassName } from '@mui/x-data-grid/internals';\nimport { useTheme } from '@mui/material/styles';\nimport { findGridCellElementsFromCol, getFieldFromHeaderElem, findHeaderElementFromField, findGroupHeaderElementsFromField } from '../../../utils/domUtils'; // TODO: remove support for Safari < 13.\n// https://caniuse.com/#search=touch-action\n//\n// Safari, on iOS, supports touch action since v13.\n// Over 80% of the iOS phones are compatible\n// in August 2020.\n// Utilizing the CSS.supports method to check if touch-action is supported.\n// Since CSS.supports is supported on all but Edge@12 and IE and touch-action\n// is supported on both Edge@12 and IE if CSS.supports is not available that means that\n// touch-action will be supported\n\nlet cachedSupportsTouchActionNone = false;\n\nfunction doesSupportTouchActionNone() {\n  if (cachedSupportsTouchActionNone === undefined) {\n    if (typeof CSS !== 'undefined' && typeof CSS.supports === 'function') {\n      cachedSupportsTouchActionNone = CSS.supports('touch-action', 'none');\n    } else {\n      cachedSupportsTouchActionNone = true;\n    }\n  }\n\n  return cachedSupportsTouchActionNone;\n}\n\nfunction trackFinger(event, currentTouchId) {\n  if (currentTouchId !== undefined && event.changedTouches) {\n    for (let i = 0; i < event.changedTouches.length; i += 1) {\n      const touch = event.changedTouches[i];\n\n      if (touch.identifier === currentTouchId) {\n        return {\n          x: touch.clientX,\n          y: touch.clientY\n        };\n      }\n    }\n\n    return false;\n  }\n\n  return {\n    x: event.clientX,\n    y: event.clientY\n  };\n}\n\nfunction computeNewWidth(initialOffsetToSeparator, clickX, columnBounds, resizeDirection) {\n  let newWidth = initialOffsetToSeparator;\n\n  if (resizeDirection === 'Right') {\n    newWidth += clickX - columnBounds.left;\n  } else {\n    newWidth += columnBounds.right - clickX;\n  }\n\n  return newWidth;\n}\n\nfunction computeOffsetToSeparator(clickX, columnBounds, resizeDirection) {\n  if (resizeDirection === 'Left') {\n    return clickX - columnBounds.left;\n  }\n\n  return columnBounds.right - clickX;\n}\n\nfunction flipResizeDirection(side) {\n  if (side === 'Right') {\n    return 'Left';\n  }\n\n  return 'Right';\n}\n\nfunction getResizeDirection(element, direction) {\n  const side = element.classList.contains(gridClasses['columnSeparator--sideRight']) ? 'Right' : 'Left';\n\n  if (direction === 'rtl') {\n    // Resizing logic should be mirrored in the RTL case\n    return flipResizeDirection(side);\n  }\n\n  return side;\n}\n\nexport const columnResizeStateInitializer = state => _extends({}, state, {\n  columnResize: {\n    resizingColumnField: ''\n  }\n});\n/**\n * @requires useGridColumns (method, event)\n * TODO: improve experience for last column\n */\n\nexport const useGridColumnResize = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridColumnResize');\n  const colDefRef = React.useRef();\n  const colElementRef = React.useRef();\n  const colGroupingElementRef = React.useRef();\n  const colCellElementsRef = React.useRef();\n  const theme = useTheme(); // To improve accessibility, the separator has padding on both sides.\n  // Clicking inside the padding area should be treated as a click in the separator.\n  // This ref stores the offset between the click and the separator.\n\n  const initialOffsetToSeparator = React.useRef();\n  const resizeDirection = React.useRef();\n  const stopResizeEventTimeout = React.useRef();\n  const touchId = React.useRef();\n\n  const updateWidth = newWidth => {\n    logger.debug(`Updating width to ${newWidth} for col ${colDefRef.current.field}`);\n    const prevWidth = colElementRef.current.offsetWidth;\n    const widthDiff = newWidth - prevWidth;\n    colDefRef.current.computedWidth = newWidth;\n    colDefRef.current.width = newWidth;\n    colDefRef.current.flex = 0;\n    colElementRef.current.style.width = `${newWidth}px`;\n    colElementRef.current.style.minWidth = `${newWidth}px`;\n    colElementRef.current.style.maxWidth = `${newWidth}px`;\n    [...colCellElementsRef.current, ...colGroupingElementRef.current].forEach(element => {\n      const div = element;\n      let finalWidth;\n\n      if (div.getAttribute('aria-colspan') === '1') {\n        finalWidth = `${newWidth}px`;\n      } else {\n        // Cell with colspan > 1 cannot be just updated width new width.\n        // Instead, we add width diff to the current width.\n        finalWidth = `${div.offsetWidth + widthDiff}px`;\n      }\n\n      div.style.width = finalWidth;\n      div.style.minWidth = finalWidth;\n      div.style.maxWidth = finalWidth;\n    });\n  };\n\n  const handleResizeMouseUp = useEventCallback(nativeEvent => {\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    stopListening();\n    apiRef.current.updateColumn(colDefRef.current);\n    clearTimeout(stopResizeEventTimeout.current);\n    stopResizeEventTimeout.current = setTimeout(() => {\n      apiRef.current.publishEvent('columnResizeStop', null, nativeEvent);\n\n      if (colDefRef.current) {\n        var _colDefRef$current;\n\n        apiRef.current.publishEvent('columnWidthChange', {\n          element: colElementRef.current,\n          colDef: colDefRef.current,\n          width: (_colDefRef$current = colDefRef.current) == null ? void 0 : _colDefRef$current.computedWidth\n        }, nativeEvent);\n      }\n    });\n    logger.debug(`Updating col ${colDefRef.current.field} with new width: ${colDefRef.current.width}`);\n  });\n  const handleResizeMouseMove = useEventCallback(nativeEvent => {\n    // Cancel move in case some other element consumed a mouseup event and it was not fired.\n    if (nativeEvent.buttons === 0) {\n      handleResizeMouseUp(nativeEvent);\n      return;\n    }\n\n    let newWidth = computeNewWidth(initialOffsetToSeparator.current, nativeEvent.clientX, colElementRef.current.getBoundingClientRect(), resizeDirection.current);\n    newWidth = clamp(newWidth, colDefRef.current.minWidth, colDefRef.current.maxWidth);\n    updateWidth(newWidth);\n    const params = {\n      element: colElementRef.current,\n      colDef: colDefRef.current,\n      width: newWidth\n    };\n    apiRef.current.publishEvent('columnResize', params, nativeEvent);\n  });\n  const handleColumnResizeMouseDown = useEventCallback((_ref, event) => {\n    let {\n      colDef\n    } = _ref;\n\n    var _apiRef$current$colum, _apiRef$current$colum2; // Only handle left clicks\n\n\n    if (event.button !== 0) {\n      return;\n    } // Skip if the column isn't resizable\n\n\n    if (!event.currentTarget.classList.contains(gridClasses['columnSeparator--resizable'])) {\n      return;\n    } // Avoid text selection\n\n\n    event.preventDefault();\n    logger.debug(`Start Resize on col ${colDef.field}`);\n    apiRef.current.publishEvent('columnResizeStart', {\n      field: colDef.field\n    }, event);\n    colDefRef.current = colDef;\n    colElementRef.current = (_apiRef$current$colum = apiRef.current.columnHeadersContainerElementRef) == null ? void 0 : _apiRef$current$colum.current.querySelector(`[data-field=\"${colDef.field}\"]`);\n    colGroupingElementRef.current = findGroupHeaderElementsFromField((_apiRef$current$colum2 = apiRef.current.columnHeadersContainerElementRef) == null ? void 0 : _apiRef$current$colum2.current, colDef.field);\n    colCellElementsRef.current = findGridCellElementsFromCol(colElementRef.current, apiRef.current);\n    const doc = ownerDocument(apiRef.current.rootElementRef.current);\n    doc.body.style.cursor = 'col-resize';\n    resizeDirection.current = getResizeDirection(event.currentTarget, theme.direction);\n    initialOffsetToSeparator.current = computeOffsetToSeparator(event.clientX, colElementRef.current.getBoundingClientRect(), resizeDirection.current);\n    doc.addEventListener('mousemove', handleResizeMouseMove);\n    doc.addEventListener('mouseup', handleResizeMouseUp);\n  });\n  const handleTouchEnd = useEventCallback(nativeEvent => {\n    const finger = trackFinger(nativeEvent, touchId.current);\n\n    if (!finger) {\n      return;\n    } // eslint-disable-next-line @typescript-eslint/no-use-before-define\n\n\n    stopListening();\n    apiRef.current.updateColumn(colDefRef.current);\n    clearTimeout(stopResizeEventTimeout.current);\n    stopResizeEventTimeout.current = setTimeout(() => {\n      apiRef.current.publishEvent('columnResizeStop', null, nativeEvent);\n    });\n    logger.debug(`Updating col ${colDefRef.current.field} with new width: ${colDefRef.current.width}`);\n  });\n  const handleTouchMove = useEventCallback(nativeEvent => {\n    const finger = trackFinger(nativeEvent, touchId.current);\n\n    if (!finger) {\n      return;\n    } // Cancel move in case some other element consumed a touchmove event and it was not fired.\n\n\n    if (nativeEvent.type === 'mousemove' && nativeEvent.buttons === 0) {\n      handleTouchEnd(nativeEvent);\n      return;\n    }\n\n    let newWidth = computeNewWidth(initialOffsetToSeparator.current, finger.x, colElementRef.current.getBoundingClientRect(), resizeDirection.current);\n    newWidth = clamp(newWidth, colDefRef.current.minWidth, colDefRef.current.maxWidth);\n    updateWidth(newWidth);\n    const params = {\n      element: colElementRef.current,\n      colDef: colDefRef.current,\n      width: newWidth\n    };\n    apiRef.current.publishEvent('columnResize', params, nativeEvent);\n  });\n  const handleTouchStart = useEventCallback(event => {\n    var _apiRef$current$colum3, _apiRef$current$colum4;\n\n    const cellSeparator = findParentElementFromClassName(event.target, gridClasses['columnSeparator--resizable']); // Let the event bubble if the target is not a col separator\n\n    if (!cellSeparator) {\n      return;\n    } // If touch-action: none; is not supported we need to prevent the scroll manually.\n\n\n    if (!doesSupportTouchActionNone()) {\n      event.preventDefault();\n    }\n\n    const touch = event.changedTouches[0];\n\n    if (touch != null) {\n      // A number that uniquely identifies the current finger in the touch session.\n      touchId.current = touch.identifier;\n    }\n\n    colElementRef.current = findParentElementFromClassName(event.target, gridClasses.columnHeader);\n    const field = getFieldFromHeaderElem(colElementRef.current);\n    const colDef = apiRef.current.getColumn(field);\n    colGroupingElementRef.current = findGroupHeaderElementsFromField((_apiRef$current$colum3 = apiRef.current.columnHeadersContainerElementRef) == null ? void 0 : _apiRef$current$colum3.current, field);\n    logger.debug(`Start Resize on col ${colDef.field}`);\n    apiRef.current.publishEvent('columnResizeStart', {\n      field\n    }, event);\n    colDefRef.current = colDef;\n    colElementRef.current = findHeaderElementFromField((_apiRef$current$colum4 = apiRef.current.columnHeadersElementRef) == null ? void 0 : _apiRef$current$colum4.current, colDef.field);\n    colCellElementsRef.current = findGridCellElementsFromCol(colElementRef.current, apiRef.current);\n    resizeDirection.current = getResizeDirection(event.target, theme.direction);\n    initialOffsetToSeparator.current = computeOffsetToSeparator(touch.clientX, colElementRef.current.getBoundingClientRect(), resizeDirection.current);\n    const doc = ownerDocument(event.currentTarget);\n    doc.addEventListener('touchmove', handleTouchMove);\n    doc.addEventListener('touchend', handleTouchEnd);\n  });\n  const stopListening = React.useCallback(() => {\n    const doc = ownerDocument(apiRef.current.rootElementRef.current);\n    doc.body.style.removeProperty('cursor');\n    doc.removeEventListener('mousemove', handleResizeMouseMove);\n    doc.removeEventListener('mouseup', handleResizeMouseUp);\n    doc.removeEventListener('touchmove', handleTouchMove);\n    doc.removeEventListener('touchend', handleTouchEnd);\n  }, [apiRef, handleResizeMouseMove, handleResizeMouseUp, handleTouchMove, handleTouchEnd]);\n  const handleResizeStart = React.useCallback(_ref2 => {\n    let {\n      field\n    } = _ref2;\n    apiRef.current.setState(state => _extends({}, state, {\n      columnResize: _extends({}, state.columnResize, {\n        resizingColumnField: field\n      })\n    }));\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  const handleResizeStop = React.useCallback(() => {\n    apiRef.current.setState(state => _extends({}, state, {\n      columnResize: _extends({}, state.columnResize, {\n        resizingColumnField: ''\n      })\n    }));\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  React.useEffect(() => {\n    return () => {\n      clearTimeout(stopResizeEventTimeout.current);\n      stopListening();\n    };\n  }, [apiRef, handleTouchStart, stopListening]);\n  useGridNativeEventListener(apiRef, () => {\n    var _apiRef$current$colum5;\n\n    return (_apiRef$current$colum5 = apiRef.current.columnHeadersElementRef) == null ? void 0 : _apiRef$current$colum5.current;\n  }, 'touchstart', handleTouchStart, {\n    passive: doesSupportTouchActionNone()\n  });\n  useGridApiEventHandler(apiRef, 'columnSeparatorMouseDown', handleColumnResizeMouseDown);\n  useGridApiEventHandler(apiRef, 'columnResizeStart', handleResizeStart);\n  useGridApiEventHandler(apiRef, 'columnResizeStop', handleResizeStop);\n  useGridApiOptionHandler(apiRef, 'columnResize', props.onColumnResize);\n  useGridApiOptionHandler(apiRef, 'columnWidthChange', props.onColumnWidthChange);\n};","map":{"version":3,"names":["_extends","React","ownerDocument","useEventCallback","gridClasses","useGridApiEventHandler","useGridApiOptionHandler","useGridNativeEventListener","useGridLogger","clamp","findParentElementFromClassName","useTheme","findGridCellElementsFromCol","getFieldFromHeaderElem","findHeaderElementFromField","findGroupHeaderElementsFromField","cachedSupportsTouchActionNone","doesSupportTouchActionNone","undefined","CSS","supports","trackFinger","event","currentTouchId","changedTouches","i","length","touch","identifier","x","clientX","y","clientY","computeNewWidth","initialOffsetToSeparator","clickX","columnBounds","resizeDirection","newWidth","left","right","computeOffsetToSeparator","flipResizeDirection","side","getResizeDirection","element","direction","classList","contains","columnResizeStateInitializer","state","columnResize","resizingColumnField","useGridColumnResize","apiRef","props","logger","colDefRef","useRef","colElementRef","colGroupingElementRef","colCellElementsRef","theme","stopResizeEventTimeout","touchId","updateWidth","debug","current","field","prevWidth","offsetWidth","widthDiff","computedWidth","width","flex","style","minWidth","maxWidth","forEach","div","finalWidth","getAttribute","handleResizeMouseUp","nativeEvent","stopListening","updateColumn","clearTimeout","setTimeout","publishEvent","_colDefRef$current","colDef","handleResizeMouseMove","buttons","getBoundingClientRect","params","handleColumnResizeMouseDown","_apiRef$current$colum","_apiRef$current$colum2","button","currentTarget","preventDefault","columnHeadersContainerElementRef","querySelector","doc","rootElementRef","body","cursor","addEventListener","handleTouchEnd","finger","handleTouchMove","type","handleTouchStart","_apiRef$current$colum3","_apiRef$current$colum4","cellSeparator","target","columnHeader","getColumn","columnHeadersElementRef","useCallback","removeProperty","removeEventListener","handleResizeStart","setState","forceUpdate","handleResizeStop","useEffect","_apiRef$current$colum5","passive","onColumnResize","onColumnWidthChange"],"sources":["/Users/dewan03/project/project/node_modules/@mui/x-data-grid-pro/hooks/features/columnResize/useGridColumnResize.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { ownerDocument, useEventCallback } from '@mui/material/utils';\nimport { gridClasses, useGridApiEventHandler, useGridApiOptionHandler, useGridNativeEventListener, useGridLogger } from '@mui/x-data-grid';\nimport { clamp, findParentElementFromClassName } from '@mui/x-data-grid/internals';\nimport { useTheme } from '@mui/material/styles';\nimport { findGridCellElementsFromCol, getFieldFromHeaderElem, findHeaderElementFromField, findGroupHeaderElementsFromField } from '../../../utils/domUtils';\n// TODO: remove support for Safari < 13.\n// https://caniuse.com/#search=touch-action\n//\n// Safari, on iOS, supports touch action since v13.\n// Over 80% of the iOS phones are compatible\n// in August 2020.\n// Utilizing the CSS.supports method to check if touch-action is supported.\n// Since CSS.supports is supported on all but Edge@12 and IE and touch-action\n// is supported on both Edge@12 and IE if CSS.supports is not available that means that\n// touch-action will be supported\nlet cachedSupportsTouchActionNone = false;\n\nfunction doesSupportTouchActionNone() {\n  if (cachedSupportsTouchActionNone === undefined) {\n    if (typeof CSS !== 'undefined' && typeof CSS.supports === 'function') {\n      cachedSupportsTouchActionNone = CSS.supports('touch-action', 'none');\n    } else {\n      cachedSupportsTouchActionNone = true;\n    }\n  }\n\n  return cachedSupportsTouchActionNone;\n}\n\nfunction trackFinger(event, currentTouchId) {\n  if (currentTouchId !== undefined && event.changedTouches) {\n    for (let i = 0; i < event.changedTouches.length; i += 1) {\n      const touch = event.changedTouches[i];\n\n      if (touch.identifier === currentTouchId) {\n        return {\n          x: touch.clientX,\n          y: touch.clientY\n        };\n      }\n    }\n\n    return false;\n  }\n\n  return {\n    x: event.clientX,\n    y: event.clientY\n  };\n}\n\nfunction computeNewWidth(initialOffsetToSeparator, clickX, columnBounds, resizeDirection) {\n  let newWidth = initialOffsetToSeparator;\n\n  if (resizeDirection === 'Right') {\n    newWidth += clickX - columnBounds.left;\n  } else {\n    newWidth += columnBounds.right - clickX;\n  }\n\n  return newWidth;\n}\n\nfunction computeOffsetToSeparator(clickX, columnBounds, resizeDirection) {\n  if (resizeDirection === 'Left') {\n    return clickX - columnBounds.left;\n  }\n\n  return columnBounds.right - clickX;\n}\n\nfunction flipResizeDirection(side) {\n  if (side === 'Right') {\n    return 'Left';\n  }\n\n  return 'Right';\n}\n\nfunction getResizeDirection(element, direction) {\n  const side = element.classList.contains(gridClasses['columnSeparator--sideRight']) ? 'Right' : 'Left';\n\n  if (direction === 'rtl') {\n    // Resizing logic should be mirrored in the RTL case\n    return flipResizeDirection(side);\n  }\n\n  return side;\n}\n\nexport const columnResizeStateInitializer = state => _extends({}, state, {\n  columnResize: {\n    resizingColumnField: ''\n  }\n});\n/**\n * @requires useGridColumns (method, event)\n * TODO: improve experience for last column\n */\n\nexport const useGridColumnResize = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridColumnResize');\n  const colDefRef = React.useRef();\n  const colElementRef = React.useRef();\n  const colGroupingElementRef = React.useRef();\n  const colCellElementsRef = React.useRef();\n  const theme = useTheme(); // To improve accessibility, the separator has padding on both sides.\n  // Clicking inside the padding area should be treated as a click in the separator.\n  // This ref stores the offset between the click and the separator.\n\n  const initialOffsetToSeparator = React.useRef();\n  const resizeDirection = React.useRef();\n  const stopResizeEventTimeout = React.useRef();\n  const touchId = React.useRef();\n\n  const updateWidth = newWidth => {\n    logger.debug(`Updating width to ${newWidth} for col ${colDefRef.current.field}`);\n    const prevWidth = colElementRef.current.offsetWidth;\n    const widthDiff = newWidth - prevWidth;\n    colDefRef.current.computedWidth = newWidth;\n    colDefRef.current.width = newWidth;\n    colDefRef.current.flex = 0;\n    colElementRef.current.style.width = `${newWidth}px`;\n    colElementRef.current.style.minWidth = `${newWidth}px`;\n    colElementRef.current.style.maxWidth = `${newWidth}px`;\n    [...colCellElementsRef.current, ...colGroupingElementRef.current].forEach(element => {\n      const div = element;\n      let finalWidth;\n\n      if (div.getAttribute('aria-colspan') === '1') {\n        finalWidth = `${newWidth}px`;\n      } else {\n        // Cell with colspan > 1 cannot be just updated width new width.\n        // Instead, we add width diff to the current width.\n        finalWidth = `${div.offsetWidth + widthDiff}px`;\n      }\n\n      div.style.width = finalWidth;\n      div.style.minWidth = finalWidth;\n      div.style.maxWidth = finalWidth;\n    });\n  };\n\n  const handleResizeMouseUp = useEventCallback(nativeEvent => {\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    stopListening();\n    apiRef.current.updateColumn(colDefRef.current);\n    clearTimeout(stopResizeEventTimeout.current);\n    stopResizeEventTimeout.current = setTimeout(() => {\n      apiRef.current.publishEvent('columnResizeStop', null, nativeEvent);\n\n      if (colDefRef.current) {\n        var _colDefRef$current;\n\n        apiRef.current.publishEvent('columnWidthChange', {\n          element: colElementRef.current,\n          colDef: colDefRef.current,\n          width: (_colDefRef$current = colDefRef.current) == null ? void 0 : _colDefRef$current.computedWidth\n        }, nativeEvent);\n      }\n    });\n    logger.debug(`Updating col ${colDefRef.current.field} with new width: ${colDefRef.current.width}`);\n  });\n  const handleResizeMouseMove = useEventCallback(nativeEvent => {\n    // Cancel move in case some other element consumed a mouseup event and it was not fired.\n    if (nativeEvent.buttons === 0) {\n      handleResizeMouseUp(nativeEvent);\n      return;\n    }\n\n    let newWidth = computeNewWidth(initialOffsetToSeparator.current, nativeEvent.clientX, colElementRef.current.getBoundingClientRect(), resizeDirection.current);\n    newWidth = clamp(newWidth, colDefRef.current.minWidth, colDefRef.current.maxWidth);\n    updateWidth(newWidth);\n    const params = {\n      element: colElementRef.current,\n      colDef: colDefRef.current,\n      width: newWidth\n    };\n    apiRef.current.publishEvent('columnResize', params, nativeEvent);\n  });\n  const handleColumnResizeMouseDown = useEventCallback(({\n    colDef\n  }, event) => {\n    var _apiRef$current$colum, _apiRef$current$colum2;\n\n    // Only handle left clicks\n    if (event.button !== 0) {\n      return;\n    } // Skip if the column isn't resizable\n\n\n    if (!event.currentTarget.classList.contains(gridClasses['columnSeparator--resizable'])) {\n      return;\n    } // Avoid text selection\n\n\n    event.preventDefault();\n    logger.debug(`Start Resize on col ${colDef.field}`);\n    apiRef.current.publishEvent('columnResizeStart', {\n      field: colDef.field\n    }, event);\n    colDefRef.current = colDef;\n    colElementRef.current = (_apiRef$current$colum = apiRef.current.columnHeadersContainerElementRef) == null ? void 0 : _apiRef$current$colum.current.querySelector(`[data-field=\"${colDef.field}\"]`);\n    colGroupingElementRef.current = findGroupHeaderElementsFromField((_apiRef$current$colum2 = apiRef.current.columnHeadersContainerElementRef) == null ? void 0 : _apiRef$current$colum2.current, colDef.field);\n    colCellElementsRef.current = findGridCellElementsFromCol(colElementRef.current, apiRef.current);\n    const doc = ownerDocument(apiRef.current.rootElementRef.current);\n    doc.body.style.cursor = 'col-resize';\n    resizeDirection.current = getResizeDirection(event.currentTarget, theme.direction);\n    initialOffsetToSeparator.current = computeOffsetToSeparator(event.clientX, colElementRef.current.getBoundingClientRect(), resizeDirection.current);\n    doc.addEventListener('mousemove', handleResizeMouseMove);\n    doc.addEventListener('mouseup', handleResizeMouseUp);\n  });\n  const handleTouchEnd = useEventCallback(nativeEvent => {\n    const finger = trackFinger(nativeEvent, touchId.current);\n\n    if (!finger) {\n      return;\n    } // eslint-disable-next-line @typescript-eslint/no-use-before-define\n\n\n    stopListening();\n    apiRef.current.updateColumn(colDefRef.current);\n    clearTimeout(stopResizeEventTimeout.current);\n    stopResizeEventTimeout.current = setTimeout(() => {\n      apiRef.current.publishEvent('columnResizeStop', null, nativeEvent);\n    });\n    logger.debug(`Updating col ${colDefRef.current.field} with new width: ${colDefRef.current.width}`);\n  });\n  const handleTouchMove = useEventCallback(nativeEvent => {\n    const finger = trackFinger(nativeEvent, touchId.current);\n\n    if (!finger) {\n      return;\n    } // Cancel move in case some other element consumed a touchmove event and it was not fired.\n\n\n    if (nativeEvent.type === 'mousemove' && nativeEvent.buttons === 0) {\n      handleTouchEnd(nativeEvent);\n      return;\n    }\n\n    let newWidth = computeNewWidth(initialOffsetToSeparator.current, finger.x, colElementRef.current.getBoundingClientRect(), resizeDirection.current);\n    newWidth = clamp(newWidth, colDefRef.current.minWidth, colDefRef.current.maxWidth);\n    updateWidth(newWidth);\n    const params = {\n      element: colElementRef.current,\n      colDef: colDefRef.current,\n      width: newWidth\n    };\n    apiRef.current.publishEvent('columnResize', params, nativeEvent);\n  });\n  const handleTouchStart = useEventCallback(event => {\n    var _apiRef$current$colum3, _apiRef$current$colum4;\n\n    const cellSeparator = findParentElementFromClassName(event.target, gridClasses['columnSeparator--resizable']); // Let the event bubble if the target is not a col separator\n\n    if (!cellSeparator) {\n      return;\n    } // If touch-action: none; is not supported we need to prevent the scroll manually.\n\n\n    if (!doesSupportTouchActionNone()) {\n      event.preventDefault();\n    }\n\n    const touch = event.changedTouches[0];\n\n    if (touch != null) {\n      // A number that uniquely identifies the current finger in the touch session.\n      touchId.current = touch.identifier;\n    }\n\n    colElementRef.current = findParentElementFromClassName(event.target, gridClasses.columnHeader);\n    const field = getFieldFromHeaderElem(colElementRef.current);\n    const colDef = apiRef.current.getColumn(field);\n    colGroupingElementRef.current = findGroupHeaderElementsFromField((_apiRef$current$colum3 = apiRef.current.columnHeadersContainerElementRef) == null ? void 0 : _apiRef$current$colum3.current, field);\n    logger.debug(`Start Resize on col ${colDef.field}`);\n    apiRef.current.publishEvent('columnResizeStart', {\n      field\n    }, event);\n    colDefRef.current = colDef;\n    colElementRef.current = findHeaderElementFromField((_apiRef$current$colum4 = apiRef.current.columnHeadersElementRef) == null ? void 0 : _apiRef$current$colum4.current, colDef.field);\n    colCellElementsRef.current = findGridCellElementsFromCol(colElementRef.current, apiRef.current);\n    resizeDirection.current = getResizeDirection(event.target, theme.direction);\n    initialOffsetToSeparator.current = computeOffsetToSeparator(touch.clientX, colElementRef.current.getBoundingClientRect(), resizeDirection.current);\n    const doc = ownerDocument(event.currentTarget);\n    doc.addEventListener('touchmove', handleTouchMove);\n    doc.addEventListener('touchend', handleTouchEnd);\n  });\n  const stopListening = React.useCallback(() => {\n    const doc = ownerDocument(apiRef.current.rootElementRef.current);\n    doc.body.style.removeProperty('cursor');\n    doc.removeEventListener('mousemove', handleResizeMouseMove);\n    doc.removeEventListener('mouseup', handleResizeMouseUp);\n    doc.removeEventListener('touchmove', handleTouchMove);\n    doc.removeEventListener('touchend', handleTouchEnd);\n  }, [apiRef, handleResizeMouseMove, handleResizeMouseUp, handleTouchMove, handleTouchEnd]);\n  const handleResizeStart = React.useCallback(({\n    field\n  }) => {\n    apiRef.current.setState(state => _extends({}, state, {\n      columnResize: _extends({}, state.columnResize, {\n        resizingColumnField: field\n      })\n    }));\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  const handleResizeStop = React.useCallback(() => {\n    apiRef.current.setState(state => _extends({}, state, {\n      columnResize: _extends({}, state.columnResize, {\n        resizingColumnField: ''\n      })\n    }));\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  React.useEffect(() => {\n    return () => {\n      clearTimeout(stopResizeEventTimeout.current);\n      stopListening();\n    };\n  }, [apiRef, handleTouchStart, stopListening]);\n  useGridNativeEventListener(apiRef, () => {\n    var _apiRef$current$colum5;\n\n    return (_apiRef$current$colum5 = apiRef.current.columnHeadersElementRef) == null ? void 0 : _apiRef$current$colum5.current;\n  }, 'touchstart', handleTouchStart, {\n    passive: doesSupportTouchActionNone()\n  });\n  useGridApiEventHandler(apiRef, 'columnSeparatorMouseDown', handleColumnResizeMouseDown);\n  useGridApiEventHandler(apiRef, 'columnResizeStart', handleResizeStart);\n  useGridApiEventHandler(apiRef, 'columnResizeStop', handleResizeStop);\n  useGridApiOptionHandler(apiRef, 'columnResize', props.onColumnResize);\n  useGridApiOptionHandler(apiRef, 'columnWidthChange', props.onColumnWidthChange);\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}