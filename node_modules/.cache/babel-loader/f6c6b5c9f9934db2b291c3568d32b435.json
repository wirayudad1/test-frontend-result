{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { randomArrayItem } from './random-generator';\nexport const addTreeDataOptionsToDemoData = function (data) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  var _groupingCol$headerNa;\n\n  const {\n    averageChildren = 2,\n    maxDepth = 1,\n    groupingField\n  } = options;\n  const hasTreeData = maxDepth > 1 && groupingField != null;\n\n  if (!hasTreeData) {\n    return data;\n  }\n\n  if (data.rows.length > 1000) {\n    throw new Error('MUI: useDemoData tree data mode only works up to 1000 rows.');\n  }\n\n  const rowsByTreeDepth = {};\n  const rowsCount = data.rows.length;\n  const groupingCol = data.columns.find(col => col.field === options.groupingField);\n\n  if (!groupingCol) {\n    throw new Error('MUI: The tree data grouping field does not exist');\n  }\n\n  data.initialState.columns.columnVisibilityModel[groupingField] = false;\n\n  for (let i = 0; i < rowsCount; i += 1) {\n    const row = data.rows[i];\n    const currentChunk = Math.floor(i * (averageChildren ** maxDepth - 1) / rowsCount) + 1;\n    const currentDepth = Math.floor(Math.log(currentChunk) / Math.log(averageChildren));\n\n    if (!rowsByTreeDepth[currentDepth]) {\n      rowsByTreeDepth[currentDepth] = {\n        rows: {},\n        rowIndexes: []\n      };\n    }\n\n    rowsByTreeDepth[currentDepth].rows[i] = {\n      value: row,\n      parentIndex: null\n    };\n    rowsByTreeDepth[currentDepth].rowIndexes.push(i);\n  }\n\n  Object.entries(rowsByTreeDepth).forEach(_ref => {\n    let [depthStr, {\n      rows\n    }] = _ref;\n    const depth = Number(depthStr);\n    Object.values(rows).forEach(row => {\n      const path = [];\n      let previousRow = null;\n\n      for (let k = depth; k >= 0; k -= 1) {\n        let rowTemp;\n\n        if (k === depth) {\n          if (depth > 0) {\n            row.parentIndex = Number(randomArrayItem(rowsByTreeDepth[depth - 1].rowIndexes));\n          }\n\n          rowTemp = row;\n        } else {\n          rowTemp = rowsByTreeDepth[k].rows[previousRow.parentIndex];\n        }\n\n        path.unshift(rowTemp.value[groupingField]);\n        previousRow = rowTemp;\n      }\n\n      row.value.path = path;\n    });\n  });\n  return _extends({}, data, {\n    groupingColDef: {\n      headerName: (_groupingCol$headerNa = groupingCol.headerName) != null ? _groupingCol$headerNa : groupingCol.field,\n      width: 250\n    },\n    getTreeDataPath: row => row.path,\n    treeData: true\n  });\n};","map":{"version":3,"names":["_extends","randomArrayItem","addTreeDataOptionsToDemoData","data","options","_groupingCol$headerNa","averageChildren","maxDepth","groupingField","hasTreeData","rows","length","Error","rowsByTreeDepth","rowsCount","groupingCol","columns","find","col","field","initialState","columnVisibilityModel","i","row","currentChunk","Math","floor","currentDepth","log","rowIndexes","value","parentIndex","push","Object","entries","forEach","depthStr","depth","Number","values","path","previousRow","k","rowTemp","unshift","groupingColDef","headerName","width","getTreeDataPath","treeData"],"sources":["/Users/dewan03/project/project/node_modules/@mui/x-data-grid-generator/services/tree-data-generator.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { randomArrayItem } from './random-generator';\nexport const addTreeDataOptionsToDemoData = (data, options = {}) => {\n  var _groupingCol$headerNa;\n\n  const {\n    averageChildren = 2,\n    maxDepth = 1,\n    groupingField\n  } = options;\n  const hasTreeData = maxDepth > 1 && groupingField != null;\n\n  if (!hasTreeData) {\n    return data;\n  }\n\n  if (data.rows.length > 1000) {\n    throw new Error('MUI: useDemoData tree data mode only works up to 1000 rows.');\n  }\n\n  const rowsByTreeDepth = {};\n  const rowsCount = data.rows.length;\n  const groupingCol = data.columns.find(col => col.field === options.groupingField);\n\n  if (!groupingCol) {\n    throw new Error('MUI: The tree data grouping field does not exist');\n  }\n\n  data.initialState.columns.columnVisibilityModel[groupingField] = false;\n\n  for (let i = 0; i < rowsCount; i += 1) {\n    const row = data.rows[i];\n    const currentChunk = Math.floor(i * (averageChildren ** maxDepth - 1) / rowsCount) + 1;\n    const currentDepth = Math.floor(Math.log(currentChunk) / Math.log(averageChildren));\n\n    if (!rowsByTreeDepth[currentDepth]) {\n      rowsByTreeDepth[currentDepth] = {\n        rows: {},\n        rowIndexes: []\n      };\n    }\n\n    rowsByTreeDepth[currentDepth].rows[i] = {\n      value: row,\n      parentIndex: null\n    };\n    rowsByTreeDepth[currentDepth].rowIndexes.push(i);\n  }\n\n  Object.entries(rowsByTreeDepth).forEach(([depthStr, {\n    rows\n  }]) => {\n    const depth = Number(depthStr);\n    Object.values(rows).forEach(row => {\n      const path = [];\n      let previousRow = null;\n\n      for (let k = depth; k >= 0; k -= 1) {\n        let rowTemp;\n\n        if (k === depth) {\n          if (depth > 0) {\n            row.parentIndex = Number(randomArrayItem(rowsByTreeDepth[depth - 1].rowIndexes));\n          }\n\n          rowTemp = row;\n        } else {\n          rowTemp = rowsByTreeDepth[k].rows[previousRow.parentIndex];\n        }\n\n        path.unshift(rowTemp.value[groupingField]);\n        previousRow = rowTemp;\n      }\n\n      row.value.path = path;\n    });\n  });\n  return _extends({}, data, {\n    groupingColDef: {\n      headerName: (_groupingCol$headerNa = groupingCol.headerName) != null ? _groupingCol$headerNa : groupingCol.field,\n      width: 250\n    },\n    getTreeDataPath: row => row.path,\n    treeData: true\n  });\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}