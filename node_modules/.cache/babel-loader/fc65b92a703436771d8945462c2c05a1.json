{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { gridColumnVisibilityModelSelector, GridEvents } from '@mui/x-data-grid-pro';\n\nconst updateColumnVisibilityModel = (columnVisibilityModel, rowGroupingModel, prevRowGroupingModel) => {\n  const newColumnVisibilityModel = _extends({}, columnVisibilityModel);\n\n  rowGroupingModel == null ? void 0 : rowGroupingModel.forEach(field => {\n    if (!(prevRowGroupingModel != null && prevRowGroupingModel.includes(field))) {\n      newColumnVisibilityModel[field] = false;\n    }\n  });\n  prevRowGroupingModel == null ? void 0 : prevRowGroupingModel.forEach(field => {\n    if (!(rowGroupingModel != null && rowGroupingModel.includes(field))) {\n      newColumnVisibilityModel[field] = true;\n    }\n  });\n  return newColumnVisibilityModel;\n};\n/**\n * Automatically hide columns when added to the row grouping model and stop hiding them when they are removed.\n * Handles both the `props.initialState.rowGrouping.model` and `props.rowGroupingModel`\n * Does not work when used with the `hide` property of `GridColDef`\n */\n\n\nexport const useKeepGroupedColumnsHidden = props => {\n  var _props$rowGroupingMod, _props$initialState, _props$initialState$r;\n\n  const initialProps = React.useRef(props);\n  const rowGroupingModel = React.useRef((_props$rowGroupingMod = props.rowGroupingModel) != null ? _props$rowGroupingMod : (_props$initialState = props.initialState) == null ? void 0 : (_props$initialState$r = _props$initialState.rowGrouping) == null ? void 0 : _props$initialState$r.model);\n  React.useEffect(() => {\n    props.apiRef.current.subscribeEvent(GridEvents.rowGroupingModelChange, newModel => {\n      const columnVisibilityModel = updateColumnVisibilityModel(gridColumnVisibilityModelSelector(props.apiRef), newModel, rowGroupingModel.current);\n      props.apiRef.current.setColumnVisibilityModel(columnVisibilityModel);\n      rowGroupingModel.current = newModel;\n    });\n  }, [props.apiRef]);\n  return React.useMemo(() => {\n    var _invariantInitialStat;\n\n    const invariantInitialState = initialProps.current.initialState;\n    const columnVisibilityModel = updateColumnVisibilityModel(invariantInitialState == null ? void 0 : (_invariantInitialStat = invariantInitialState.columns) == null ? void 0 : _invariantInitialStat.columnVisibilityModel, rowGroupingModel.current, undefined);\n    return _extends({}, invariantInitialState, {\n      columns: _extends({}, invariantInitialState == null ? void 0 : invariantInitialState.columns, {\n        columnVisibilityModel\n      })\n    });\n  }, []);\n};","map":{"version":3,"names":["_extends","React","gridColumnVisibilityModelSelector","GridEvents","updateColumnVisibilityModel","columnVisibilityModel","rowGroupingModel","prevRowGroupingModel","newColumnVisibilityModel","forEach","field","includes","useKeepGroupedColumnsHidden","props","_props$rowGroupingMod","_props$initialState","_props$initialState$r","initialProps","useRef","initialState","rowGrouping","model","useEffect","apiRef","current","subscribeEvent","rowGroupingModelChange","newModel","setColumnVisibilityModel","useMemo","_invariantInitialStat","invariantInitialState","columns","undefined"],"sources":["/Users/dewan03/project/project/node_modules/@mui/x-data-grid-premium/hooks/utils/useKeepGroupedColumnsHidden.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { gridColumnVisibilityModelSelector, GridEvents } from '@mui/x-data-grid-pro';\n\nconst updateColumnVisibilityModel = (columnVisibilityModel, rowGroupingModel, prevRowGroupingModel) => {\n  const newColumnVisibilityModel = _extends({}, columnVisibilityModel);\n\n  rowGroupingModel == null ? void 0 : rowGroupingModel.forEach(field => {\n    if (!(prevRowGroupingModel != null && prevRowGroupingModel.includes(field))) {\n      newColumnVisibilityModel[field] = false;\n    }\n  });\n  prevRowGroupingModel == null ? void 0 : prevRowGroupingModel.forEach(field => {\n    if (!(rowGroupingModel != null && rowGroupingModel.includes(field))) {\n      newColumnVisibilityModel[field] = true;\n    }\n  });\n  return newColumnVisibilityModel;\n};\n/**\n * Automatically hide columns when added to the row grouping model and stop hiding them when they are removed.\n * Handles both the `props.initialState.rowGrouping.model` and `props.rowGroupingModel`\n * Does not work when used with the `hide` property of `GridColDef`\n */\n\n\nexport const useKeepGroupedColumnsHidden = props => {\n  var _props$rowGroupingMod, _props$initialState, _props$initialState$r;\n\n  const initialProps = React.useRef(props);\n  const rowGroupingModel = React.useRef((_props$rowGroupingMod = props.rowGroupingModel) != null ? _props$rowGroupingMod : (_props$initialState = props.initialState) == null ? void 0 : (_props$initialState$r = _props$initialState.rowGrouping) == null ? void 0 : _props$initialState$r.model);\n  React.useEffect(() => {\n    props.apiRef.current.subscribeEvent(GridEvents.rowGroupingModelChange, newModel => {\n      const columnVisibilityModel = updateColumnVisibilityModel(gridColumnVisibilityModelSelector(props.apiRef), newModel, rowGroupingModel.current);\n      props.apiRef.current.setColumnVisibilityModel(columnVisibilityModel);\n      rowGroupingModel.current = newModel;\n    });\n  }, [props.apiRef]);\n  return React.useMemo(() => {\n    var _invariantInitialStat;\n\n    const invariantInitialState = initialProps.current.initialState;\n    const columnVisibilityModel = updateColumnVisibilityModel(invariantInitialState == null ? void 0 : (_invariantInitialStat = invariantInitialState.columns) == null ? void 0 : _invariantInitialStat.columnVisibilityModel, rowGroupingModel.current, undefined);\n    return _extends({}, invariantInitialState, {\n      columns: _extends({}, invariantInitialState == null ? void 0 : invariantInitialState.columns, {\n        columnVisibilityModel\n      })\n    });\n  }, []);\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}