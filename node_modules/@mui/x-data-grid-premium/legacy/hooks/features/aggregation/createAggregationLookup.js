import { gridColumnLookupSelector, gridFilteredRowsLookupSelector, gridRowIdsSelector, gridRowTreeSelector } from '@mui/x-data-grid-pro';
import { getAggregationRules } from './gridAggregationUtils';
import { gridAggregationModelSelector } from './gridAggregationSelectors';

var getAggregationCellValue = function getAggregationCellValue(_ref) {
  var apiRef = _ref.apiRef,
      groupId = _ref.groupId,
      field = _ref.field,
      aggregationFunction = _ref.aggregationFunction,
      aggregationRowsScope = _ref.aggregationRowsScope;
  var rowTree = gridRowTreeSelector(apiRef);
  var filteredRowsLookup = gridFilteredRowsLookupSelector(apiRef);
  var rowIds; // TODO: Add custom root id

  if (groupId === '') {
    rowIds = gridRowIdsSelector(apiRef).filter(function (rowId) {
      return !rowTree[rowId].isAutoGenerated;
    });
  } else {
    rowIds = apiRef.current.getRowGroupChildren({
      groupId: groupId
    });
  }

  var values = [];
  rowIds.forEach(function (rowId) {
    var _rowNode$children;

    if (aggregationRowsScope === 'filtered' && filteredRowsLookup[rowId] === false) {
      return;
    } // If the row is a group, we want to aggregate based on its children
    // For instance in the following tree, we want the aggregated values of A to be based on A.A, A.B.A and A.B.B but not A.B
    // A
    //   A.A
    //   A.B
    //     A.B.A
    //     A.B.B


    var rowNode = apiRef.current.getRowNode(rowId);

    if ((_rowNode$children = rowNode.children) != null && _rowNode$children.length) {
      return;
    }

    values.push(apiRef.current.getCellValue(rowId, field));
  });
  return aggregationFunction.apply({
    values: values
  });
};

var getGroupAggregatedValue = function getGroupAggregatedValue(_ref2) {
  var groupId = _ref2.groupId,
      apiRef = _ref2.apiRef,
      aggregationRowsScope = _ref2.aggregationRowsScope,
      aggregatedFields = _ref2.aggregatedFields,
      aggregationRules = _ref2.aggregationRules,
      position = _ref2.position;
  var groupAggregationLookup = {};

  for (var j = 0; j < aggregatedFields.length; j += 1) {
    var aggregatedField = aggregatedFields[j];
    var columnAggregationRules = aggregationRules[aggregatedField];
    groupAggregationLookup[aggregatedField] = {
      position: position,
      value: getAggregationCellValue({
        apiRef: apiRef,
        groupId: groupId,
        field: aggregatedField,
        aggregationFunction: columnAggregationRules.aggregationFunction,
        aggregationRowsScope: aggregationRowsScope
      })
    };
  }

  return groupAggregationLookup;
};

export var createAggregationLookup = function createAggregationLookup(_ref3) {
  var apiRef = _ref3.apiRef,
      aggregationFunctions = _ref3.aggregationFunctions,
      aggregationRowsScope = _ref3.aggregationRowsScope,
      getAggregationPosition = _ref3.getAggregationPosition;
  var aggregationRules = getAggregationRules({
    columnsLookup: gridColumnLookupSelector(apiRef),
    aggregationModel: gridAggregationModelSelector(apiRef),
    aggregationFunctions: aggregationFunctions
  });
  var aggregatedFields = Object.keys(aggregationRules);

  if (aggregatedFields.length === 0) {
    return {};
  }

  var aggregationLookup = {};
  var rowIds = gridRowIdsSelector(apiRef);
  var rowTree = gridRowTreeSelector(apiRef);

  for (var i = 0; i < rowIds.length; i += 1) {
    var _node$children;

    var rowId = rowIds[i];
    var node = rowTree[rowId];
    var hasChildren = (_node$children = node.children) == null ? void 0 : _node$children.some(function (childId) {
      var _rowTree$childId$posi;

      return ((_rowTree$childId$posi = rowTree[childId].position) != null ? _rowTree$childId$posi : 'body') === 'body';
    });

    if (hasChildren) {
      var _position = getAggregationPosition(node);

      if (_position != null) {
        aggregationLookup[rowId] = getGroupAggregatedValue({
          groupId: rowId,
          apiRef: apiRef,
          aggregatedFields: aggregatedFields,
          aggregationRowsScope: aggregationRowsScope,
          aggregationRules: aggregationRules,
          position: _position
        });
      }
    }
  } // TODO: Add custom root id


  var position = getAggregationPosition(null);

  if (position != null) {
    aggregationLookup[''] = getGroupAggregatedValue({
      groupId: '',
      apiRef: apiRef,
      aggregatedFields: aggregatedFields,
      aggregationRowsScope: aggregationRowsScope,
      aggregationRules: aggregationRules,
      position: position
    });
  }

  return aggregationLookup;
};